{"version":3,"file":"static/js/661.c1152aa2.chunk.js","mappings":"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","sources":["components/AlertConfig.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport GlassCard from './ui/GlassCard';\nimport GlassButton from './ui/GlassButton';\n\nconst AlertConfig = () => {\n  const [zones, setZones] = useState([]);\n  const [groups, setGroups] = useState([]);\n  const [alertRules, setAlertRules] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState('rules');\n  const [showCreateRuleModal, setShowCreateRuleModal] = useState(false);\n  const [editingRule, setEditingRule] = useState(null);\n\n  // Form state for alert rules\n  const [ruleForm, setRuleForm] = useState({\n    name: '',\n    description: '',\n    alert_type: 'zone_entry',\n    severity: 'medium',\n    zone_id: '',\n    conditions: {\n      time_restrictions: null,\n      max_capacity: '',\n      speed_limits: {\n        max_speed_mps: ''\n      }\n    },\n    target_groups: [],\n    escalation_rules: {\n      enabled: false,\n      steps: [\n        {\n          step_number: 1,\n          delay_seconds: 300,\n          channels: ['websocket'],\n          target_groups: [],\n          message_template: ''\n        }\n      ]\n    }\n  });\n\n  useEffect(() => {\n    fetchZones();\n    fetchGroups();\n    fetchAlertRules();\n  }, []);\n\n  const fetchZones = async () => {\n    try {\n      const response = await fetch('/api/zones/');\n      if (!response.ok) {\n        throw new Error(`Failed to fetch zones: ${response.status} ${response.statusText}`);\n      }\n      const data = await response.json();\n      setZones(data.zones || []);\n      setError(null);\n    } catch (error) {\n      console.error('Error fetching zones:', error);\n      setError('Failed to load zones. Please try again.');\n    }\n  };\n\n  const fetchGroups = async () => {\n    try {\n      const response = await fetch('/api/users/groups');\n      if (!response.ok) {\n        throw new Error(`Failed to fetch groups: ${response.status} ${response.statusText}`);\n      }\n      const data = await response.json();\n      setGroups(data.groups || []);\n      setError(null);\n    } catch (error) {\n      console.error('Error fetching groups:', error);\n      setError('Failed to load user groups. Please try again.');\n    }\n  };\n\n  const fetchAlertRules = async () => {\n    try {\n      const response = await fetch('/api/alerts/rules/');\n      if (!response.ok) {\n        throw new Error(`Failed to fetch alert rules: ${response.status} ${response.statusText}`);\n      }\n      const data = await response.json();\n      setAlertRules(data.rules || []);\n      setError(null);\n    } catch (error) {\n      console.error('Error fetching alert rules:', error);\n      setError('Failed to load alert rules. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateRule = async (e) => {\n    e.preventDefault();\n    try {\n      const response = await fetch('/api/alerts/rules/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(ruleForm),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        console.log('Alert rule created:', data);\n        setShowCreateRuleModal(false);\n        resetRuleForm();\n        fetchAlertRules(); // Refresh the list\n        setError(null);\n      } else {\n        const errorData = await response.json().catch(() => ({ detail: 'Unknown error' }));\n        setError(`Failed to create alert rule: ${errorData.detail || response.statusText}`);\n      }\n    } catch (error) {\n      console.error('Error creating alert rule:', error);\n      setError('Network error while creating alert rule. Please try again.');\n    }\n  };\n\n  const handleEditRule = async (e) => {\n    e.preventDefault();\n    try {\n      const response = await fetch(`/api/alerts/rules/${editingRule.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(ruleForm),\n      });\n\n      if (response.ok) {\n        console.log('Alert rule updated');\n        setEditingRule(null);\n        resetRuleForm();\n        fetchAlertRules(); // Refresh the list\n        setError(null);\n      } else {\n        const errorData = await response.json().catch(() => ({ detail: 'Unknown error' }));\n        setError(`Failed to update alert rule: ${errorData.detail || response.statusText}`);\n      }\n    } catch (error) {\n      console.error('Error updating alert rule:', error);\n      setError('Network error while updating alert rule. Please try again.');\n    }\n  };\n\n  const handleDeleteRule = async (ruleId) => {\n    // In a real app, you'd show a proper confirmation dialog\n    if (!window.confirm('Are you sure you want to delete this alert rule?')) {\n      return;\n    }\n\n    try {\n      const response = await fetch(`/api/alerts/rules/${ruleId}`, {\n        method: 'DELETE',\n      });\n\n      if (response.ok) {\n        console.log('Alert rule deleted');\n        fetchAlertRules(); // Refresh the list\n        setError(null);\n      } else {\n        const errorData = await response.json().catch(() => ({ detail: 'Unknown error' }));\n        setError(`Failed to delete alert rule: ${errorData.detail || response.statusText}`);\n      }\n    } catch (error) {\n      console.error('Error deleting alert rule:', error);\n      setError('Network error while deleting alert rule. Please try again.');\n    }\n  };\n\n  const resetRuleForm = () => {\n    setRuleForm({\n      name: '',\n      description: '',\n      alert_type: 'zone_entry',\n      severity: 'medium',\n      zone_id: '',\n      conditions: {\n        time_restrictions: null,\n        max_capacity: '',\n        speed_limits: {\n          max_speed_mps: ''\n        }\n      },\n      target_groups: [],\n      escalation_rules: {\n        enabled: false,\n        steps: [\n          {\n            step_number: 1,\n            delay_seconds: 300,\n            channels: ['websocket'],\n            target_groups: [],\n            message_template: ''\n          }\n        ]\n      }\n    });\n  };\n\n  const openEditModal = (rule) => {\n    setEditingRule(rule);\n    // Parse JSON fields back to objects\n    const parsedRule = {\n      ...rule,\n      conditions: rule.conditions ? JSON.parse(rule.conditions) : {\n        time_restrictions: null,\n        max_capacity: '',\n        speed_limits: { max_speed_mps: '' }\n      },\n      target_groups: rule.target_groups ? JSON.parse(rule.target_groups) : [],\n      escalation_rules: rule.escalation_rules ? JSON.parse(rule.escalation_rules) : {\n        enabled: false,\n        steps: [{\n          step_number: 1,\n          delay_seconds: 300,\n          channels: ['websocket'],\n          target_groups: [],\n          message_template: ''\n        }]\n      }\n    };\n    setRuleForm(parsedRule);\n  };\n\n  const addEscalationStep = () => {\n    const newStep = {\n      step_number: ruleForm.escalation_rules.steps.length + 1,\n      delay_seconds: 300,\n      channels: ['websocket'],\n      target_groups: [],\n      message_template: ''\n    };\n\n    setRuleForm({\n      ...ruleForm,\n      escalation_rules: {\n        ...ruleForm.escalation_rules,\n        steps: [...ruleForm.escalation_rules.steps, newStep]\n      }\n    });\n  };\n\n  const updateEscalationStep = (index, field, value) => {\n    const updatedSteps = ruleForm.escalation_rules.steps.map((step, i) =>\n      i === index ? { ...step, [field]: value } : step\n    );\n\n    setRuleForm({\n      ...ruleForm,\n      escalation_rules: {\n        ...ruleForm.escalation_rules,\n        steps: updatedSteps\n      }\n    });\n  };\n\n  const removeEscalationStep = (index) => {\n    const updatedSteps = ruleForm.escalation_rules.steps.filter((_, i) => i !== index);\n    setRuleForm({\n      ...ruleForm,\n      escalation_rules: {\n        ...ruleForm.escalation_rules,\n        steps: updatedSteps\n      }\n    });\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-96\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-accent-cyan\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-3xl font-bold text-white\">Alert Configuration</h1>\n        <GlassButton\n          onClick={() => setShowCreateRuleModal(true)}\n          variant=\"primary\"\n          className=\"flex items-center space-x-2\"\n        >\n          <span>+</span>\n          <span>Create Alert Rule</span>\n        </GlassButton>\n      </div>\n\n      {/* Error Display */}\n      {error && (\n        <div className=\"bg-red-900/20 border border-red-500/50 rounded-lg p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <svg className=\"w-5 h-5 text-red-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n              </svg>\n              <span className=\"text-red-400 font-medium\">Error</span>\n            </div>\n            <GlassButton\n              onClick={() => {\n                setError(null);\n                fetchZones();\n                fetchGroups();\n                fetchAlertRules();\n              }}\n              variant=\"secondary\"\n              className=\"text-sm\"\n            >\n              Retry\n            </GlassButton>\n          </div>\n          <p className=\"text-red-300 mt-2\">{error}</p>\n        </div>\n      )}\n\n      {/* Tabs */}\n      <div className=\"flex space-x-1 bg-dark-800/50 p-1 rounded-lg\">\n        {[\n          { id: 'rules', label: 'Alert Rules' },\n          { id: 'escalation', label: 'Escalation Rules' },\n          { id: 'notifications', label: 'Notification Settings' }\n        ].map((tab) => (\n          <button\n            key={tab.id}\n            onClick={() => setActiveTab(tab.id)}\n            className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${\n              activeTab === tab.id\n                ? 'bg-accent-cyan text-dark-900'\n                : 'text-gray-300 hover:text-white'\n            }`}\n          >\n            {tab.label}\n          </button>\n        ))}\n      </div>\n\n      {/* Alert Rules Tab */}\n      {activeTab === 'rules' && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Rules List */}\n          <GlassCard title=\"Alert Rules\" icon={<RulesIcon />}>\n            <div className=\"space-y-3\">\n              {alertRules.map((rule) => (\n                <div\n                  key={rule.id}\n                  className=\"p-4 bg-dark-800/50 rounded-lg border border-dark-600\"\n                >\n                  <div className=\"flex justify-between items-start mb-2\">\n                    <div>\n                      <h3 className=\"font-semibold text-white\">{rule.name}</h3>\n                      <p className=\"text-sm text-gray-300\">{rule.description}</p>\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <button\n                        onClick={() => openEditModal(rule)}\n                        className=\"text-accent-cyan hover:text-accent-cyan/80 text-sm\"\n                      >\n                        Edit\n                      </button>\n                      <button\n                        onClick={() => handleDeleteRule(rule.id)}\n                        className=\"text-red-400 hover:text-red-300 text-sm\"\n                      >\n                        Delete\n                      </button>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-4 text-xs text-gray-400\">\n                    <span>Type: {rule.alert_type}</span>\n                    <span>Severity: {rule.severity}</span>\n                    <span>Zone: {zones.find(z => z.id === parseInt(rule.zone_id))?.name || 'All'}</span>\n                  </div>\n                </div>\n              ))}\n              {alertRules.length === 0 && (\n                <p className=\"text-gray-400 text-center py-8\">No alert rules configured</p>\n              )}\n            </div>\n          </GlassCard>\n\n          {/* Quick Stats */}\n          <GlassCard title=\"Rule Statistics\" icon={<StatsIcon />}>\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-300\">Total Rules:</span>\n                <span className=\"text-white font-semibold\">{alertRules.length}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-300\">Active Rules:</span>\n                <span className=\"text-green-400 font-semibold\">\n                  {alertRules.filter(r => r.is_active).length}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-300\">Rules with Escalation:</span>\n                <span className=\"text-accent-cyan font-semibold\">\n                  {alertRules.filter(r => {\n                    try {\n                      const escalation = r.escalation_rules ? JSON.parse(r.escalation_rules) : {};\n                      return escalation.enabled;\n                    } catch {\n                      return false;\n                    }\n                  }).length}\n                </span>\n              </div>\n            </div>\n          </GlassCard>\n        </div>\n      )}\n\n      {/* Escalation Rules Tab */}\n      {activeTab === 'escalation' && (\n        <GlassCard title=\"Escalation Rule Builder\" icon={<EscalationIcon />}>\n          <div className=\"space-y-6\">\n            <div className=\"bg-dark-800/30 p-4 rounded-lg\">\n              <h3 className=\"text-lg font-semibold text-white mb-4\">Default Escalation Template</h3>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between p-3 bg-dark-800/50 rounded\">\n                  <div>\n                    <span className=\"text-white font-medium\">Step 1:</span>\n                    <span className=\"text-gray-300 ml-2\">Initial Alert (0 min)</span>\n                  </div>\n                  <span className=\"text-xs text-gray-400\">WebSocket</span>\n                </div>\n                <div className=\"flex items-center justify-between p-3 bg-dark-800/50 rounded\">\n                  <div>\n                    <span className=\"text-white font-medium\">Step 2:</span>\n                    <span className=\"text-gray-300 ml-2\">Escalate to Supervisors (5 min)</span>\n                  </div>\n                  <span className=\"text-xs text-gray-400\">Email + WebSocket</span>\n                </div>\n                <div className=\"flex items-center justify-between p-3 bg-dark-800/50 rounded\">\n                  <div>\n                    <span className=\"text-white font-medium\">Step 3:</span>\n                    <span className=\"text-gray-300 ml-2\">Emergency Response (15 min)</span>\n                  </div>\n                  <span className=\"text-xs text-gray-400\">SMS + Email + WebSocket</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </GlassCard>\n      )}\n\n      {/* Notification Settings Tab */}\n      {activeTab === 'notifications' && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <GlassCard title=\"Notification Channels\" icon={<NotificationIcon />}>\n            <div className=\"space-y-4\">\n              {[\n                { name: 'WebSocket', description: 'Real-time browser notifications', enabled: true },\n                { name: 'Email', description: 'Email notifications for escalation', enabled: true },\n                { name: 'SMS', description: 'SMS notifications for critical alerts', enabled: false },\n                { name: 'Push Notifications', description: 'Mobile push notifications', enabled: false }\n              ].map((channel) => (\n                <div key={channel.name} className=\"flex items-center justify-between p-3 bg-dark-800/30 rounded-lg\">\n                  <div>\n                    <h4 className=\"font-medium text-white\">{channel.name}</h4>\n                    <p className=\"text-sm text-gray-300\">{channel.description}</p>\n                  </div>\n                  <label className=\"relative inline-flex items-center cursor-pointer\">\n                    <input\n                      type=\"checkbox\"\n                      className=\"sr-only peer\"\n                      defaultChecked={channel.enabled}\n                    />\n                    <div className=\"w-11 h-6 bg-dark-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-accent-cyan\"></div>\n                  </label>\n                </div>\n              ))}\n            </div>\n          </GlassCard>\n\n          <GlassCard title=\"Notification Preferences\" icon={<PreferencesIcon />}>\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                  Default Notification Sound\n                </label>\n                <select className=\"w-full px-3 py-2 bg-dark-800 border border-dark-600 rounded-lg text-white focus:border-accent-cyan focus:outline-none\">\n                  <option>Default</option>\n                  <option>Chime</option>\n                  <option>Bell</option>\n                  <option>Alert</option>\n                  <option>None</option>\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                  Auto-dismiss after (seconds)\n                </label>\n                <input\n                  type=\"number\"\n                  defaultValue={30}\n                  className=\"w-full px-3 py-2 bg-dark-800 border border-dark-600 rounded-lg text-white focus:border-accent-cyan focus:outline-none\"\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h4 className=\"font-medium text-white\">Desktop Notifications</h4>\n                  <p className=\"text-sm text-gray-300\">Show browser notifications</p>\n                </div>\n                <label className=\"relative inline-flex items-center cursor-pointer\">\n                  <input type=\"checkbox\" className=\"sr-only peer\" defaultChecked />\n                  <div className=\"w-11 h-6 bg-dark-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-accent-cyan\"></div>\n                </label>\n              </div>\n            </div>\n          </GlassCard>\n        </div>\n      )}\n\n      {/* Create/Edit Rule Modal */}\n      {(showCreateRuleModal || editingRule) && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n          <GlassCard className=\"w-full max-w-4xl mx-4 max-h-[90vh] overflow-y-auto\">\n            <form onSubmit={editingRule ? handleEditRule : handleCreateRule}>\n              <h2 className=\"text-xl font-bold text-white mb-4\">\n                {editingRule ? 'Edit Alert Rule' : 'Create Alert Rule'}\n              </h2>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                    Rule Name\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={ruleForm.name}\n                    onChange={(e) => setRuleForm({ ...ruleForm, name: e.target.value })}\n                    className=\"w-full px-3 py-2 bg-dark-800 border border-dark-600 rounded-lg text-white focus:border-accent-cyan focus:outline-none\"\n                    required\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                    Alert Type\n                  </label>\n                  <select\n                    value={ruleForm.alert_type}\n                    onChange={(e) => setRuleForm({ ...ruleForm, alert_type: e.target.value })}\n                    className=\"w-full px-3 py-2 bg-dark-800 border border-dark-600 rounded-lg text-white focus:border-accent-cyan focus:outline-none\"\n                  >\n                    <option value=\"zone_entry\">Zone Entry</option>\n                    <option value=\"zone_exit\">Zone Exit</option>\n                    <option value=\"speeding\">Speeding</option>\n                    <option value=\"offline\">Offline</option>\n                    <option value=\"battery_low\">Battery Low</option>\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                    Severity\n                  </label>\n                  <select\n                    value={ruleForm.severity}\n                    onChange={(e) => setRuleForm({ ...ruleForm, severity: e.target.value })}\n                    className=\"w-full px-3 py-2 bg-dark-800 border border-dark-600 rounded-lg text-white focus:border-accent-cyan focus:outline-none\"\n                  >\n                    <option value=\"low\">Low</option>\n                    <option value=\"medium\">Medium</option>\n                    <option value=\"high\">High</option>\n                    <option value=\"critical\">Critical</option>\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                    Zone\n                  </label>\n                  <select\n                    value={ruleForm.zone_id}\n                    onChange={(e) => setRuleForm({ ...ruleForm, zone_id: e.target.value })}\n                    className=\"w-full px-3 py-2 bg-dark-800 border border-dark-600 rounded-lg text-white focus:border-accent-cyan focus:outline-none\"\n                  >\n                    <option value=\"\">All Zones</option>\n                    {zones.map((zone) => (\n                      <option key={zone.id} value={zone.id}>{zone.name}</option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n\n              <div className=\"mt-4\">\n                <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                  Description\n                </label>\n                <textarea\n                  value={ruleForm.description}\n                  onChange={(e) => setRuleForm({ ...ruleForm, description: e.target.value })}\n                  rows={3}\n                  className=\"w-full px-3 py-2 bg-dark-800 border border-dark-600 rounded-lg text-white focus:border-accent-cyan focus:outline-none\"\n                />\n              </div>\n\n              {/* Target Groups */}\n              <div className=\"mt-4\">\n                <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                  Target Groups\n                </label>\n                <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2\">\n                  {groups.map((group) => (\n                    <label key={group.id} className=\"flex items-center space-x-2 p-2 bg-dark-800/30 rounded\">\n                      <input\n                        type=\"checkbox\"\n                        checked={ruleForm.target_groups.includes(group.id)}\n                        onChange={(e) => {\n                          const updatedGroups = e.target.checked\n                            ? [...ruleForm.target_groups, group.id]\n                            : ruleForm.target_groups.filter(id => id !== group.id);\n                          setRuleForm({ ...ruleForm, target_groups: updatedGroups });\n                        }}\n                        className=\"rounded border-dark-600 text-accent-cyan focus:ring-accent-cyan\"\n                      />\n                      <span className=\"text-white text-sm\">{group.name}</span>\n                    </label>\n                  ))}\n                </div>\n              </div>\n\n              {/* Escalation Rules */}\n              <div className=\"mt-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"text-lg font-semibold text-white\">Escalation Rules</h3>\n                  <label className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"checkbox\"\n                      checked={ruleForm.escalation_rules.enabled}\n                      onChange={(e) => setRuleForm({\n                        ...ruleForm,\n                        escalation_rules: {\n                          ...ruleForm.escalation_rules,\n                          enabled: e.target.checked\n                        }\n                      })}\n                      className=\"rounded border-dark-600 text-accent-cyan focus:ring-accent-cyan\"\n                    />\n                    <span className=\"text-gray-300\">Enable Escalation</span>\n                  </label>\n                </div>\n\n                {ruleForm.escalation_rules.enabled && (\n                  <div className=\"space-y-4\">\n                    {ruleForm.escalation_rules.steps.map((step, index) => (\n                      <div key={index} className=\"p-4 bg-dark-800/30 rounded-lg border border-dark-600\">\n                        <div className=\"flex justify-between items-center mb-3\">\n                          <h4 className=\"font-medium text-white\">Step {step.step_number}</h4>\n                          {index > 0 && (\n                            <button\n                              type=\"button\"\n                              onClick={() => removeEscalationStep(index)}\n                              className=\"text-red-400 hover:text-red-300 text-sm\"\n                            >\n                              Remove\n                            </button>\n                          )}\n                        </div>\n\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <div>\n                            <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                              Delay (seconds)\n                            </label>\n                            <input\n                              type=\"number\"\n                              value={step.delay_seconds}\n                              onChange={(e) => updateEscalationStep(index, 'delay_seconds', parseInt(e.target.value))}\n                              className=\"w-full px-3 py-2 bg-dark-800 border border-dark-600 rounded-lg text-white focus:border-accent-cyan focus:outline-none\"\n                            />\n                          </div>\n\n                          <div>\n                            <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                              Notification Channels\n                            </label>\n                            <div className=\"space-y-2\">\n                              {['websocket', 'email', 'sms'].map((channel) => (\n                                <label key={channel} className=\"flex items-center space-x-2\">\n                                  <input\n                                    type=\"checkbox\"\n                                    checked={step.channels.includes(channel)}\n                                    onChange={(e) => {\n                                      const updatedChannels = e.target.checked\n                                        ? [...step.channels, channel]\n                                        : step.channels.filter(c => c !== channel);\n                                      updateEscalationStep(index, 'channels', updatedChannels);\n                                    }}\n                                    className=\"rounded border-dark-600 text-accent-cyan focus:ring-accent-cyan\"\n                                  />\n                                  <span className=\"text-gray-300 text-sm capitalize\">{channel}</span>\n                                </label>\n                              ))}\n                            </div>\n                          </div>\n                        </div>\n\n                        <div className=\"mt-3\">\n                          <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                            Custom Message Template\n                          </label>\n                          <input\n                            type=\"text\"\n                            value={step.message_template}\n                            onChange={(e) => updateEscalationStep(index, 'message_template', e.target.value)}\n                            placeholder=\"Custom escalation message (optional)\"\n                            className=\"w-full px-3 py-2 bg-dark-800 border border-dark-600 rounded-lg text-white focus:border-accent-cyan focus:outline-none\"\n                          />\n                        </div>\n                      </div>\n                    ))}\n\n                    <GlassButton\n                      type=\"button\"\n                      onClick={addEscalationStep}\n                      variant=\"secondary\"\n                      className=\"w-full\"\n                    >\n                      Add Escalation Step\n                    </GlassButton>\n                  </div>\n                )}\n              </div>\n\n              <div className=\"flex space-x-3 mt-6\">\n                <GlassButton type=\"submit\" variant=\"primary\">\n                  {editingRule ? 'Update Rule' : 'Create Rule'}\n                </GlassButton>\n                <GlassButton\n                  type=\"button\"\n                  variant=\"secondary\"\n                  onClick={() => {\n                    setShowCreateRuleModal(false);\n                    setEditingRule(null);\n                    resetRuleForm();\n                  }}\n                >\n                  Cancel\n                </GlassButton>\n              </div>\n            </form>\n          </GlassCard>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Icon Components\nconst RulesIcon = () => (\n  <svg className=\"w-6 h-6 text-accent-cyan\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n  </svg>\n);\n\nconst StatsIcon = () => (\n  <svg className=\"w-6 h-6 text-accent-cyan\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n  </svg>\n);\n\nconst EscalationIcon = () => (\n  <svg className=\"w-6 h-6 text-accent-cyan\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\n  </svg>\n);\n\nconst NotificationIcon = () => (\n  <svg className=\"w-6 h-6 text-accent-cyan\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 17h5l-5 5-5-5h5V12h-5l5-5 5 5h-5v5z\" />\n  </svg>\n);\n\nconst PreferencesIcon = () => (\n  <svg className=\"w-6 h-6 text-accent-cyan\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4\" />\n  </svg>\n);\n\nexport default AlertConfig;"],"names":["RulesIcon","_jsx","className","fill","stroke","viewBox","children","strokeLinecap","strokeLinejoin","strokeWidth","d","StatsIcon","EscalationIcon","NotificationIcon","PreferencesIcon","AlertConfig","zones","setZones","useState","groups","setGroups","alertRules","setAlertRules","loading","setLoading","error","setError","activeTab","setActiveTab","showCreateRuleModal","setShowCreateRuleModal","editingRule","setEditingRule","ruleForm","setRuleForm","name","description","alert_type","severity","zone_id","conditions","time_restrictions","max_capacity","speed_limits","max_speed_mps","target_groups","escalation_rules","enabled","steps","step_number","delay_seconds","channels","message_template","useEffect","fetchZones","fetchGroups","fetchAlertRules","async","response","fetch","ok","Error","concat","status","statusText","data","json","console","rules","resetRuleForm","updateEscalationStep","index","field","value","updatedSteps","map","step","i","_objectSpread","_jsxs","GlassButton","onClick","variant","id","label","tab","GlassCard","title","icon","rule","_zones$find","parsedRule","JSON","parse","openEditModal","window","confirm","ruleId","method","log","errorData","catch","detail","handleDeleteRule","find","z","parseInt","length","filter","r","is_active","_unused","channel","type","defaultChecked","defaultValue","onSubmit","e","preventDefault","headers","body","stringify","onChange","target","required","zone","rows","group","checked","includes","updatedGroups","_","removeEscalationStep","updatedChannels","c","placeholder","addEscalationStep","newStep"],"sourceRoot":""}