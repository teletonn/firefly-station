{"version":3,"file":"static/js/473.a3d6693f.chunk.js","mappings":"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","sources":["components/MapView.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useWebSocket } from '../contexts/WebSocketContext';\nimport { MapContainer, TileLayer, Marker, Popup, Circle, Polyline } from 'react-leaflet';\nimport L from 'leaflet';\n// import 'leaflet.heat'; // Commented out - not available\nimport { DivIcon } from 'leaflet';\nimport {\n  MapPin,\n  Users,\n  Edit3,\n  Trash2,\n  Plus,\n  RotateCcw,\n  Target,\n  Clock,\n  Save,\n  X\n} from 'lucide-react';\nimport Glassmorphism from './ui/Glassmorphism';\nimport GlassButton from './ui/GlassButton';\nimport GlassCard from './ui/GlassCard';\nimport 'leaflet/dist/leaflet.css';\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',\n});\n\n// Custom marker icons for different user types\nconst createCustomIcon = (color = '#3b82f6', isMoving = false) => {\n  return new DivIcon({\n    html: `\n      <div style=\"\n        width: 12px;\n        height: 12px;\n        background-color: ${color};\n        border: 2px solid white;\n        border-radius: 50%;\n        box-shadow: 0 2px 4px rgba(0,0,0,0.3);\n        ${isMoving ? 'animation: pulse 1.5s infinite;' : ''}\n      \"></div>\n      <style>\n        @keyframes pulse {\n          0% { opacity: 1; }\n          50% { opacity: 0.5; }\n          100% { opacity: 1; }\n        }\n      </style>\n    `,\n    className: 'custom-marker',\n    iconSize: [12, 12],\n    iconAnchor: [6, 6],\n  });\n};\n\n// Zone style configurations\nconst zoneStyles = {\n  safe_zone: {\n    color: '#10b981',\n    fillColor: '#10b981',\n    fillOpacity: 0.2,\n    weight: 2\n  },\n  danger_zone: {\n    color: '#ef4444',\n    fillColor: '#ef4444',\n    fillOpacity: 0.3,\n    weight: 3\n  },\n  poi: {\n    color: '#f59e0b',\n    fillColor: '#f59e0b',\n    fillOpacity: 0.25,\n    weight: 2\n  },\n  restricted: {\n    color: '#8b5cf6',\n    fillColor: '#8b5cf6',\n    fillOpacity: 0.2,\n    weight: 2\n  }\n};\n\n// Map Controls Component\nconst MapControls = ({\n  onDrawMode,\n  onEditMode,\n  onDeleteMode,\n  isDrawing,\n  isEditing,\n  showHeatmap,\n  onToggleHeatmap,\n  showDwellTimes,\n  onToggleDwellTimes\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <Glassmorphism className=\"absolute top-4 right-4 z-[1000] p-2\" hover={false}>\n      <div className=\"flex flex-col space-y-2\">\n        <GlassButton\n          variant={isDrawing ? 'primary' : 'ghost'}\n          size=\"sm\"\n          onClick={onDrawMode}\n          icon={<Plus className=\"w-4 h-4\" />}\n        >\n          {t('map.draw_zone')}\n        </GlassButton>\n        <GlassButton\n          variant={isEditing ? 'primary' : 'ghost'}\n          size=\"sm\"\n          onClick={onEditMode}\n          icon={<Edit3 className=\"w-4 h-4\" />}\n        >\n          {t('map.edit_zone')}\n        </GlassButton>\n        <GlassButton\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={onDeleteMode}\n          icon={<Trash2 className=\"w-4 h-4\" />}\n        >\n          {t('map.delete_zone')}\n        </GlassButton>\n        <div className=\"border-t border-gray-600 my-2\"></div>\n        <GlassButton\n          variant={showHeatmap ? 'primary' : 'ghost'}\n          size=\"sm\"\n          onClick={onToggleHeatmap}\n          icon={<MapPin className=\"w-4 h-4\" />}\n        >\n          {t('map.heatmap')}\n        </GlassButton>\n        <GlassButton\n          variant={showDwellTimes ? 'primary' : 'ghost'}\n          size=\"sm\"\n          onClick={onToggleDwellTimes}\n          icon={<Clock className=\"w-4 h-4\" />}\n        >\n          {t('map.dwell_times')}\n        </GlassButton>\n      </div>\n    </Glassmorphism>\n  );\n};\n\n// Zone Info Panel Component\nconst ZoneInfoPanel = ({ zone, onClose, onEdit, onDelete, isEditing, onSave, onCancel }) => {\n  const { t } = useTranslation();\n  const [editForm, setEditForm] = useState({\n    name: '',\n    description: '',\n    center_latitude: 0,\n    center_longitude: 0,\n    radius_meters: 100,\n    zone_type: 'safe_zone'\n  });\n\n  // Initialize edit form when zone changes\n  useEffect(() => {\n    if (zone) {\n      setEditForm({\n        name: zone.name || '',\n        description: zone.description || '',\n        center_latitude: zone.center_latitude || 0,\n        center_longitude: zone.center_longitude || 0,\n        radius_meters: zone.radius_meters || 100,\n        zone_type: zone.zone_type || 'safe_zone'\n      });\n    }\n  }, [zone]);\n\n  const handleSave = () => {\n    if (onSave) {\n      onSave(zone.id, editForm);\n    }\n  };\n\n  const handleCancel = () => {\n    if (onCancel) {\n      onCancel();\n    }\n  };\n\n  if (!zone) return null;\n\n  if (isEditing) {\n    return (\n      <Glassmorphism className=\"absolute top-4 left-4 z-[1000] w-80\">\n        <GlassCard\n          title={t('zones.edit')}\n          subtitle={zone.name}\n          actions={\n            <div className=\"flex space-x-2\">\n              <GlassButton size=\"sm\" variant=\"primary\" onClick={handleSave}>\n                <Save className=\"w-4 h-4\" />\n              </GlassButton>\n              <GlassButton size=\"sm\" variant=\"ghost\" onClick={handleCancel}>\n                <X className=\"w-4 h-4\" />\n              </GlassButton>\n            </div>\n          }\n        >\n          <div className=\"space-y-3\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-1\">\n                {t('zones.name')}\n              </label>\n              <input\n                type=\"text\"\n                value={editForm.name}\n                onChange={(e) => setEditForm(prev => ({ ...prev, name: e.target.value }))}\n                className=\"w-full px-2 py-1 bg-white/10 border border-white/20 rounded text-white text-sm focus:outline-none focus:ring-1 focus:ring-blue-500\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-1\">\n                {t('zones.description')}\n              </label>\n              <textarea\n                value={editForm.description}\n                onChange={(e) => setEditForm(prev => ({ ...prev, description: e.target.value }))}\n                rows={2}\n                className=\"w-full px-2 py-1 bg-white/10 border border-white/20 rounded text-white text-sm focus:outline-none focus:ring-1 focus:ring-blue-500\"\n              />\n            </div>\n            <div className=\"grid grid-cols-2 gap-2\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-300 mb-1\">\n                  {t('zones.latitude')}\n                </label>\n                <input\n                  type=\"number\"\n                  step=\"any\"\n                  value={editForm.center_latitude}\n                  onChange={(e) => setEditForm(prev => ({ ...prev, center_latitude: parseFloat(e.target.value) }))}\n                  className=\"w-full px-2 py-1 bg-white/10 border border-white/20 rounded text-white text-sm focus:outline-none focus:ring-1 focus:ring-blue-500\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-300 mb-1\">\n                  {t('zones.longitude')}\n                </label>\n                <input\n                  type=\"number\"\n                  step=\"any\"\n                  value={editForm.center_longitude}\n                  onChange={(e) => setEditForm(prev => ({ ...prev, center_longitude: parseFloat(e.target.value) }))}\n                  className=\"w-full px-2 py-1 bg-white/10 border border-white/20 rounded text-white text-sm focus:outline-none focus:ring-1 focus:ring-blue-500\"\n                />\n              </div>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-1\">\n                {t('zones.radius')} (m)\n              </label>\n              <input\n                type=\"number\"\n                min=\"1\"\n                value={editForm.radius_meters}\n                onChange={(e) => setEditForm(prev => ({ ...prev, radius_meters: parseInt(e.target.value) }))}\n                className=\"w-full px-2 py-1 bg-white/10 border border-white/20 rounded text-white text-sm focus:outline-none focus:ring-1 focus:ring-blue-500\"\n              />\n            </div>\n          </div>\n        </GlassCard>\n      </Glassmorphism>\n    );\n  }\n\n  return (\n    <Glassmorphism className=\"absolute top-4 left-4 z-[1000] w-80\">\n      <GlassCard\n        title={zone.name}\n        subtitle={`${t('zones.type')}: ${t(`zones.${zone.zone_type}`)}`}\n        actions={\n          <div className=\"flex space-x-2\">\n            <GlassButton size=\"sm\" variant=\"ghost\" onClick={onEdit}>\n              <Edit3 className=\"w-4 h-4\" />\n            </GlassButton>\n            <GlassButton size=\"sm\" variant=\"ghost\" onClick={onDelete}>\n              <Trash2 className=\"w-4 h-4\" />\n            </GlassButton>\n            <GlassButton size=\"sm\" variant=\"ghost\" onClick={onClose}>\n              <RotateCcw className=\"w-4 h-4\" />\n            </GlassButton>\n          </div>\n        }\n      >\n        <div className=\"space-y-3\">\n          <p className=\"text-sm text-gray-300\">{zone.description}</p>\n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n            <div>\n              <span className=\"text-gray-400\">{t('zones.center')}:</span>\n              <div className=\"text-white\">\n                {zone.center_latitude.toFixed(6)}, {zone.center_longitude.toFixed(6)}\n              </div>\n            </div>\n            <div>\n              <span className=\"text-gray-400\">{t('zones.radius')}:</span>\n              <div className=\"text-white\">{zone.radius_meters}m</div>\n            </div>\n          </div>\n          <div className=\"text-xs text-gray-400\">\n            {t('common.create')}: {new Date(zone.created_at).toLocaleDateString()}\n          </div>\n        </div>\n      </GlassCard>\n    </Glassmorphism>\n  );\n};\n\n// User Marker Component\nconst UserMarker = ({ user, onClick }) => {\n  const { t } = useTranslation();\n  const position = [user.latitude, user.longitude];\n  const isMoving = user.is_moving || false;\n  const lastUpdate = new Date(user.last_location_update);\n  const timeAgo = Math.floor((Date.now() - lastUpdate) / 60000); // minutes\n\n  return (\n    <Marker\n      position={position}\n      icon={createCustomIcon(\n        user.current_zone_id ? zoneStyles[user.zone_type]?.color || '#3b82f6' : '#6b7280',\n        isMoving\n      )}\n      eventHandlers={{\n        click: () => onClick && onClick(user)\n      }}\n    >\n      <Popup>\n        <div className=\"p-2\">\n          <h3 className=\"font-semibold text-gray-900\">{user.long_name || user.short_name}</h3>\n          <p className=\"text-sm text-gray-600\">\n            {t('users.last_seen')}: {timeAgo} {t('time.minutes_ago')}\n          </p>\n          <p className=\"text-sm text-gray-600\">\n            {t('users.status')}: {user.device_status === 'online' ? t('users.online') : t('users.offline')}\n          </p>\n          {user.battery_level && (\n            <p className=\"text-sm text-gray-600\">\n              {t('users.battery')}: {user.battery_level}%\n            </p>\n          )}\n          {user.current_zone_id && (\n            <p className=\"text-sm text-blue-600\">\n              Zone: {user.current_zone_name}\n            </p>\n          )}\n        </div>\n      </Popup>\n    </Marker>\n  );\n};\n\n// Movement Trail Component\nconst MovementTrail = ({ trail, color = '#3b82f6' }) => {\n  if (!trail || trail.length < 2) return null;\n\n  const positions = trail.map(point => [point.latitude, point.longitude]);\n\n  return (\n    <Polyline\n      positions={positions}\n      pathOptions={{\n        color,\n        weight: 2,\n        opacity: 0.6,\n        dashArray: '5, 5'\n      }}\n    />\n  );\n};\n\n// Heatmap Layer Component - Commented out due to missing leaflet.heat dependency\n// const HeatmapLayer = ({ data, map }) => {\n//   useEffect(() => {\n//     if (!map || !data || data.length === 0) return;\n\n//     // Create heatmap data format for leaflet.heat\n//     const heatData = data.map(point => [\n//       point.lat,\n//       point.lon,\n//       point.intensity / 10 // Normalize intensity\n//     ]);\n\n//     // Add heatmap layer\n//     const heatLayer = L.heatLayer(heatData, {\n//       radius: 25,\n//       blur: 15,\n//       maxZoom: 10,\n//       max: 1.0,\n//       gradient: {\n//         0.2: 'blue',\n//         0.4: 'lime',\n//         0.6: 'yellow',\n//         0.8: 'orange',\n//         1.0: 'red'\n//       }\n//     }).addTo(map);\n\n//     return () => {\n//       if (map.hasLayer(heatLayer)) {\n//         map.removeLayer(heatLayer);\n//       }\n//     };\n//   }, [data, map]);\n\n//   return null;\n// };\n\n// Dwell Time Overlay Component\nconst DwellTimeOverlay = ({ dwellTimes }) => {\n  if (!dwellTimes || dwellTimes.length === 0) return null;\n\n  return (\n    <>\n      {dwellTimes.map((zone, index) => (\n        <Circle\n          key={`dwell-${index}`}\n          center={[zone.center_lat || 0, zone.center_lon || 0]}\n          radius={50} // Small indicator circle\n          pathOptions={{\n            color: '#ff6b6b',\n            fillColor: '#ff6b6b',\n            fillOpacity: 0.8,\n            weight: 2\n          }}\n        >\n          <Popup>\n            <div className=\"p-2\">\n              <h3 className=\"font-semibold text-gray-900\">{zone.zone_name}</h3>\n              <p className=\"text-sm text-gray-600\">\n                Users: {zone.users}<br/>\n                Avg Dwell: {zone.avg_dwell_hours.toFixed(1)} hours\n              </p>\n            </div>\n          </Popup>\n        </Circle>\n      ))}\n    </>\n  );\n};\n\n// Main Map Component\nconst MapView = ({\n  className = '',\n  center = [55.7558, 37.6176],\n  zoom = 13,\n  users = [],\n  zones = [],\n  trails = [],\n  onUserClick\n}) => {\n  const { t } = useTranslation();\n  const { subscribe, isConnected } = useWebSocket();\n  const mapRef = useRef();\n  const [selectedZone, setSelectedZone] = useState(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [isEditing, setIsEditing] = useState(false);\n  const [liveUsers, setLiveUsers] = useState([]);\n  const [liveZones, setLiveZones] = useState([]);\n  const [movementTrails, setMovementTrails] = useState([]);\n  const [showHeatmap, setShowHeatmap] = useState(false);\n  const [dwellTimes, setDwellTimes] = useState([]);\n  const [showDwellTimes, setShowDwellTimes] = useState(false);\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [isEditingZone, setIsEditingZone] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  // Fetch initial data\n  useEffect(() => {\n    fetchZones();\n    fetchUsers();\n  }, []);\n\n  const fetchZones = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch('/api/zones/?limit=100&offset=0', {\n        headers: {\n          'Authorization': token ? `Bearer ${token}` : '',\n        },\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setLiveZones(data || []);\n      }\n    } catch (error) {\n      console.error('Error fetching zones:', error);\n    }\n  };\n\n  const fetchUsers = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch('/api/users/?limit=100&offset=0', {\n        headers: {\n          'Authorization': token ? `Bearer ${token}` : '',\n        },\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setLiveUsers(data.users || []);\n      }\n    } catch (error) {\n      console.error('Error fetching users:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const createZone = async (zoneData) => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch('/api/zones/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': token ? `Bearer ${token}` : '',\n        },\n        body: JSON.stringify(zoneData),\n      });\n      if (response.ok) {\n        const newZone = await response.json();\n        setLiveZones(prev => [...prev, newZone]);\n        return newZone;\n      } else {\n        console.error('Error creating zone:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error creating zone:', error);\n    }\n    return null;\n  };\n\n  const updateZone = async (zoneId, zoneData) => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`/api/zones/${zoneId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': token ? `Bearer ${token}` : '',\n        },\n        body: JSON.stringify(zoneData),\n      });\n      if (response.ok) {\n        const updatedZone = await response.json();\n        setLiveZones(prev => prev.map(zone =>\n          zone.id === zoneId ? updatedZone : zone\n        ));\n        return updatedZone;\n      } else {\n        console.error('Error updating zone:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error updating zone:', error);\n    }\n    return null;\n  };\n\n  const deleteZone = async (zoneId) => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`/api/zones/${zoneId}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': token ? `Bearer ${token}` : '',\n        },\n      });\n      if (response.ok) {\n        setLiveZones(prev => prev.filter(zone => zone.id !== zoneId));\n        return true;\n      } else {\n        console.error('Error deleting zone:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error deleting zone:', error);\n    }\n    return false;\n  };\n\n  // Handle zone click\n  const handleZoneClick = (zone) => {\n    setSelectedZone(zone);\n  };\n\n  // Initialize live data\n  useEffect(() => {\n    setLiveUsers(users);\n    setLiveZones(zones);\n    setMovementTrails(trails);\n  }, [users, zones, trails]);\n\n\n  const fetchDwellTimes = async () => {\n    try {\n      const response = await fetch('/api/geolocation/analytics/dwell-time?days=7');\n      const data = await response.json();\n      setDwellTimes(data.dwell_times || []);\n    } catch (error) {\n      console.error('Error fetching dwell times:', error);\n    }\n  };\n\n\n  useEffect(() => {\n    if (showDwellTimes) {\n      fetchDwellTimes();\n    }\n  }, [showDwellTimes]);\n\n  // Subscribe to real-time updates\n  useEffect(() => {\n    const unsubscribeLocationUpdate = subscribe('location_update', (message) => {\n      const locationData = message.data;\n      setLiveUsers(prev => prev.map(user =>\n        user.id === locationData.user_id\n          ? {\n              ...user,\n              latitude: locationData.latitude,\n              longitude: locationData.longitude,\n              altitude: locationData.altitude,\n              last_location_update: locationData.timestamp,\n              is_moving: true // Assume moving if location updated\n            }\n          : user\n      ));\n\n      // Add to movement trail\n      setMovementTrails(prev => {\n        const userTrail = prev.find(trail => trail.user_id === locationData.user_id);\n        if (userTrail) {\n          userTrail.points.push({\n            latitude: locationData.latitude,\n            longitude: locationData.longitude,\n            timestamp: locationData.timestamp\n          });\n          // Keep only last 50 points\n          if (userTrail.points.length > 50) {\n            userTrail.points = userTrail.points.slice(-50);\n          }\n        } else {\n          prev.push({\n            user_id: locationData.user_id,\n            color: '#3b82f6',\n            points: [{\n              latitude: locationData.latitude,\n              longitude: locationData.longitude,\n              timestamp: locationData.timestamp\n            }]\n          });\n        }\n        return [...prev];\n      });\n    });\n\n    const unsubscribeZoneChange = subscribe('zone_change', (message) => {\n      const zoneChangeData = message.data;\n      setLiveUsers(prev => prev.map(user =>\n        user.id === zoneChangeData.user_id\n          ? {\n              ...user,\n              current_zone_id: zoneChangeData.new_zone_id,\n              current_zone_name: zoneChangeData.new_zone_name\n            }\n          : user\n      ));\n    });\n\n    const unsubscribeZoneUpdate = subscribe('zone_update', (message) => {\n      const zoneData = message.data;\n      if (zoneData.action === 'create') {\n        setLiveZones(prev => [...prev, zoneData.zone]);\n      } else if (zoneData.action === 'update') {\n        setLiveZones(prev => prev.map(zone =>\n          zone.id === zoneData.zone.id ? zoneData.zone : zone\n        ));\n      } else if (zoneData.action === 'delete') {\n        setLiveZones(prev => prev.filter(zone => zone.id !== zoneData.zone_id));\n      }\n    });\n\n    return () => {\n      unsubscribeLocationUpdate();\n      unsubscribeZoneChange();\n      unsubscribeZoneUpdate();\n    };\n  }, [subscribe]);\n\n  // Handle zone edit\n  const handleZoneEdit = async (zone) => {\n    // For now, just show an alert. In a full implementation, this would open an edit modal\n    alert(`Edit zone ${zone.name} - Feature not implemented in map view. Use Zones page.`);\n    setSelectedZone(null);\n  };\n\n  // Handle zone delete\n  const handleZoneDelete = async (zone) => {\n    if (window.confirm(`Delete zone \"${zone.name}\"?`)) {\n      await deleteZone(zone.id);\n    }\n    setSelectedZone(null);\n  };\n\n  // Handle zone edit save\n  const handleZoneEditSave = async (zoneId, formData) => {\n    await updateZone(zoneId, formData);\n    setIsEditingZone(false);\n    setSelectedZone(null);\n  };\n\n  // Handle zone edit cancel\n  const handleZoneEditCancel = () => {\n    setIsEditingZone(false);\n    setSelectedZone(null);\n  };\n\n  // Map event handlers\n  const handleMapClick = async (e) => {\n    if (e.originalEvent.ctrlKey) {\n      // CTRL+click: Create new zone at clicked location\n      const newZone = {\n        name: `Zone ${liveZones.length + 1}`,\n        center_latitude: e.latlng.lat,\n        center_longitude: e.latlng.lng,\n        radius_meters: 100,\n        zone_type: 'safe_zone'\n      };\n      console.log('Creating new zone via CTRL+click:', newZone);\n      await createZone(newZone);\n    } else if (isDrawing) {\n      // Create new zone at clicked location (legacy drawing mode)\n      const newZone = {\n        name: `Zone ${liveZones.length + 1}`,\n        center_latitude: e.latlng.lat,\n        center_longitude: e.latlng.lng,\n        radius_meters: 100,\n        zone_type: 'safe_zone'\n      };\n      console.log('Creating new zone:', newZone);\n      await createZone(newZone);\n      setIsDrawing(false);\n    }\n  };\n\n  return (\n    <div className={`relative w-full h-full ${className}`}>\n      <MapContainer\n        center={center}\n        zoom={zoom}\n        className=\"w-full h-full z-0\"\n        ref={(map) => {\n          mapRef.current = map;\n        }}\n        onClick={handleMapClick}\n      >\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n        />\n\n        {/* Render zones */}\n        {liveZones.map((zone) => (\n          <Circle\n            key={zone.id}\n            center={[zone.center_latitude, zone.center_longitude]}\n            radius={zone.radius_meters}\n            pathOptions={zoneStyles[zone.zone_type] || zoneStyles.safe_zone}\n            eventHandlers={{\n              click: (e) => {\n                e.originalEvent.stopPropagation();\n                if (e.originalEvent.ctrlKey) {\n                  // CTRL+click: Edit zone\n                  setSelectedZone(zone);\n                  setIsEditingZone(true);\n                  setIsDrawing(false);\n                  setIsEditing(false);\n                  setIsDeleting(false);\n                } else if (isDeleting) {\n                  handleZoneDelete(zone);\n                } else {\n                  handleZoneClick(zone);\n                }\n              }\n            }}\n          >\n            <Popup>\n              <div className=\"p-2\">\n                <h3 className=\"font-semibold\">{zone.name}</h3>\n                <p className=\"text-sm text-gray-600\">{zone.description}</p>\n                <p className=\"text-xs text-gray-500\">\n                  {t(`zones.${zone.zone_type}`)} • {zone.radius_meters}m radius\n                </p>\n              </div>\n            </Popup>\n          </Circle>\n        ))}\n\n        {/* Render user markers */}\n        {liveUsers.map((user) => (\n          <UserMarker\n            key={user.id}\n            user={user}\n            onClick={onUserClick}\n          />\n        ))}\n\n        {/* Render movement trails */}\n        {movementTrails.map((trail, index) => (\n          <MovementTrail\n            key={index}\n            trail={trail.points}\n            color={trail.color || '#3b82f6'}\n          />\n        ))}\n\n        {/* Render heatmap layer - commented out due to missing dependency */}\n        {/* {showHeatmap && <HeatmapLayer data={heatmapData} map={mapInstance} />} */}\n\n        {/* Render dwell time overlays */}\n        {showDwellTimes && <DwellTimeOverlay dwellTimes={dwellTimes} />}\n      </MapContainer>\n\n      {/* Map Controls */}\n      <MapControls\n        onDrawMode={() => {\n          setIsDrawing(!isDrawing);\n          setIsEditing(false);\n          setSelectedZone(null);\n        }}\n        onEditMode={() => {\n          setIsEditing(!isEditing);\n          setIsDrawing(false);\n          setSelectedZone(null);\n        }}\n        onDeleteMode={() => {\n          setIsDeleting(!isDeleting);\n          setIsDrawing(false);\n          setIsEditing(false);\n        }}\n        isDrawing={isDrawing}\n        isEditing={isEditing}\n        showHeatmap={showHeatmap}\n        onToggleHeatmap={() => setShowHeatmap(!showHeatmap)}\n        showDwellTimes={showDwellTimes}\n        onToggleDwellTimes={() => setShowDwellTimes(!showDwellTimes)}\n      />\n\n      {/* Zone Info Panel */}\n      <ZoneInfoPanel\n        zone={selectedZone}\n        onClose={() => {\n          setSelectedZone(null);\n          setIsEditingZone(false);\n        }}\n        onEdit={handleZoneEdit}\n        onDelete={handleZoneDelete}\n        isEditing={isEditingZone}\n        onSave={handleZoneEditSave}\n        onCancel={handleZoneEditCancel}\n      />\n\n      {/* Loading overlay */}\n      {loading && (\n        <div className=\"absolute inset-0 bg-black/50 flex items-center justify-center z-[2000]\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-accent-cyan\"></div>\n        </div>\n      )}\n\n      {/* Map Status */}\n      <Glassmorphism className=\"absolute bottom-4 left-4 z-[1000] p-3\">\n        <div className=\"flex items-center space-x-4 text-sm text-gray-300\">\n          <div className=\"flex items-center space-x-1\">\n            <Target className=\"w-4 h-4\" />\n            <span>{liveZones.length} {t('nav.zones')}</span>\n          </div>\n          <div className=\"flex items-center space-x-1\">\n            <Users className=\"w-4 h-4\" />\n            <span>{liveUsers.length} {t('nav.users')}</span>\n          </div>\n          <div className=\"flex items-center space-x-1\">\n            <div className={`w-2 h-2 rounded-full ${isConnected ? 'bg-green-400' : 'bg-red-400'}`}></div>\n            <span>{isConnected ? t('map.live') : t('map.offline')}</span>\n          </div>\n          {isDrawing && (\n            <div className=\"text-blue-400\">\n              {t('map.draw_zone_cancel')}\n            </div>\n          )}\n        </div>\n      </Glassmorphism>\n    </div>\n  );\n};\n\nexport default MapView;"],"names":["L","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","createCustomIcon","color","arguments","length","undefined","isMoving","DivIcon","html","concat","className","iconSize","iconAnchor","zoneStyles","safe_zone","fillColor","fillOpacity","weight","danger_zone","poi","restricted","MapControls","_ref","onDrawMode","onEditMode","onDeleteMode","isDrawing","isEditing","showHeatmap","onToggleHeatmap","showDwellTimes","onToggleDwellTimes","t","useTranslation","_jsx","Glassmorphism","hover","children","_jsxs","GlassButton","variant","size","onClick","icon","Plus","Edit3","Trash2","MapPin","Clock","ZoneInfoPanel","_ref2","zone","onClose","onEdit","onDelete","onSave","onCancel","editForm","setEditForm","useState","name","description","center_latitude","center_longitude","radius_meters","zone_type","useEffect","handleSave","id","handleCancel","GlassCard","title","subtitle","actions","Save","X","type","value","onChange","e","prev","_objectSpread","target","rows","step","parseFloat","min","parseInt","RotateCcw","toFixed","Date","created_at","toLocaleDateString","UserMarker","_ref3","_zoneStyles$user$zone","user","position","latitude","longitude","is_moving","lastUpdate","last_location_update","timeAgo","Math","floor","now","Marker","current_zone_id","eventHandlers","click","Popup","long_name","short_name","device_status","battery_level","current_zone_name","MovementTrail","_ref4","trail","positions","map","point","Polyline","pathOptions","opacity","dashArray","DwellTimeOverlay","_ref5","dwellTimes","_Fragment","index","Circle","center","center_lat","center_lon","radius","zone_name","users","avg_dwell_hours","_ref6","zoom","zones","trails","onUserClick","subscribe","isConnected","useWebSocket","mapRef","useRef","selectedZone","setSelectedZone","setIsDrawing","setIsEditing","liveUsers","setLiveUsers","liveZones","setLiveZones","movementTrails","setMovementTrails","setShowHeatmap","setDwellTimes","setShowDwellTimes","isDeleting","setIsDeleting","isEditingZone","setIsEditingZone","loading","setLoading","fetchZones","fetchUsers","async","token","localStorage","getItem","response","fetch","headers","ok","data","json","error","console","createZone","method","body","JSON","stringify","zoneData","newZone","statusText","dwell_times","fetchDwellTimes","unsubscribeLocationUpdate","message","locationData","user_id","altitude","timestamp","userTrail","find","points","push","slice","unsubscribeZoneChange","zoneChangeData","new_zone_id","new_zone_name","unsubscribeZoneUpdate","action","filter","zone_id","handleZoneDelete","window","confirm","zoneId","deleteZone","MapContainer","ref","current","originalEvent","ctrlKey","latlng","lat","lng","log","TileLayer","url","attribution","stopPropagation","handleZoneClick","alert","formData","updatedZone","updateZone","handleZoneEditCancel","Target","Users"],"sourceRoot":""}