{"version":3,"file":"static/js/114.f0366a7e.chunk.js","mappings":"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","sources":["components/BotControls.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport GlassCard from './ui/GlassCard';\r\nimport GlassButton from './ui/GlassButton';\r\n\r\nconst BotControls = () => {\r\n  const { t } = useTranslation();\r\n  const [botStatus, setBotStatus] = useState(null);\r\n  const [analytics, setAnalytics] = useState(null);\r\n  const [recentActivity, setRecentActivity] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [activeTab, setActiveTab] = useState('overview'); // 'overview', 'analytics', 'activity', 'settings'\r\n\r\n  useEffect(() => {\r\n    loadBotData();\r\n    // Set up polling for real-time updates\r\n    const interval = setInterval(loadBotData, 30000); // Update every 30 seconds\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const loadBotData = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n\r\n      // Load bot status and analytics\r\n      const [statusRes, analyticsRes] = await Promise.all([\r\n        fetch('/api/bot-controls/status'),\r\n        fetch('/api/bot-controls/analytics/triggers')\r\n      ]);\r\n\r\n      if (statusRes.ok) {\r\n        const statusData = await statusRes.json();\r\n        setBotStatus(statusData);\r\n      }\r\n\r\n      if (analyticsRes.ok) {\r\n        const analyticsData = await analyticsRes.json();\r\n        setAnalytics(analyticsData);\r\n      }\r\n\r\n      // Load recent activity\r\n      await loadRecentActivity();\r\n\r\n    } catch (error) {\r\n      console.error('Error loading bot data:', error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadRecentActivity = async () => {\r\n    try {\r\n      const response = await fetch('/api/bot-controls/analytics/triggers?limit=20');\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setRecentActivity(data.recent_logs || []);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading recent activity:', error);\r\n    }\r\n  };\r\n\r\n  const handleBotCommand = async (command, parameters = {}) => {\r\n    try {\r\n      const response = await fetch('/api/bot-controls/command', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ command, parameters }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        alert(`${t('botControls.command_executed')} ${result.message}`);\r\n        await loadBotData(); // Refresh data\r\n      } else {\r\n        alert(t('botControls.error_executing_command'));\r\n      }\r\n    } catch (error) {\r\n      console.error('Error executing bot command:', error);\r\n      alert(t('botControls.error_executing_command'));\r\n    }\r\n  };\r\n\r\n  const handleRestartBot = async () => {\r\n    // For now, we'll just restart without confirmation\r\n    // In a real app, you'd show a proper confirmation dialog\r\n    try {\r\n      const response = await fetch('/api/bot-controls/restart', {\r\n        method: 'POST',\r\n      });\r\n\r\n      if (response.ok) {\r\n        alert(t('botControls.bot_restart_initiated'));\r\n      } else {\r\n        alert(t('botControls.error_restarting_bot'));\r\n      }\r\n    } catch (error) {\r\n      console.error('Error restarting bot:', error);\r\n      alert(t('botControls.error_restarting_bot'));\r\n    }\r\n  };\r\n\r\n  const formatUptime = (uptime) => {\r\n    if (!uptime || uptime === 'N/A') return 'N/A';\r\n    return uptime;\r\n  };\r\n\r\n  const formatDuration = (ms) => {\r\n    if (!ms) return 'N/A';\r\n    return `${(ms / 1000).toFixed(2)}s`;\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"space-y-6\">\r\n        <h1 className=\"text-3xl font-bold text-white\">{t('botControls.title')}</h1>\r\n        <div className=\"flex justify-center items-center h-64\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500\"></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex justify-between items-center\">\r\n        <h1 className=\"text-3xl font-bold text-white\">{t('botControls.title')}</h1>\r\n        <div className=\"flex space-x-3\">\r\n          <GlassButton\r\n            onClick={() => handleBotCommand('status_check')}\r\n            className=\"bg-blue-600 hover:bg-blue-700\"\r\n          >\r\n            {t('botControls.status_check')}\r\n          </GlassButton>\r\n          <GlassButton\r\n            onClick={handleRestartBot}\r\n            className=\"bg-yellow-600 hover:bg-yellow-700\"\r\n          >\r\n            {t('botControls.restart_bot')}\r\n          </GlassButton>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Tab Navigation */}\r\n      <div className=\"flex space-x-1 bg-dark-800 rounded-lg p-1\">\r\n        {[\r\n          { id: 'overview', label: t('botControls.overview') },\r\n          { id: 'analytics', label: t('botControls.analytics') },\r\n          { id: 'activity', label: t('botControls.activity') },\r\n          { id: 'settings', label: t('botControls.settings') }\r\n        ].map(tab => (\r\n          <button\r\n            key={tab.id}\r\n            onClick={() => setActiveTab(tab.id)}\r\n            className={`flex-1 px-4 py-2 rounded-md font-medium transition-colors ${\r\n              activeTab === tab.id\r\n                ? 'bg-blue-600 text-white'\r\n                : 'text-dark-300 hover:text-white hover:bg-dark-700'\r\n            }`}\r\n          >\r\n            {tab.label}\r\n          </button>\r\n        ))}\r\n      </div>\r\n\r\n      {activeTab === 'overview' && (\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n          {/* Bot Status */}\r\n          <GlassCard className=\"p-6\">\r\n            <h2 className=\"text-xl font-semibold text-white mb-4\">{t('botControls.bot_status')}</h2>\r\n\r\n            {botStatus && (\r\n              <div className=\"space-y-4\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"text-dark-300\">{t('botControls.status')}:</span>\r\n                  <span className={`px-3 py-1 rounded-full text-sm font-medium ${\r\n                    botStatus.status === 'running'\r\n                      ? 'bg-green-900 text-green-300'\r\n                      : 'bg-red-900 text-red-300'\r\n                  }`}>\r\n                    {botStatus.status || t('botControls.unknown')}\r\n                  </span>\r\n                </div>\r\n\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"text-dark-300\">{t('botControls.uptime')}:</span>\r\n                  <span className=\"text-white\">{formatUptime(botStatus.uptime)}</span>\r\n                </div>\r\n\r\n                {botStatus.stats && (\r\n                  <>\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-dark-300\">{t('botControls.total_users')}:</span>\r\n                      <span className=\"text-white\">{botStatus.stats.total_users || 0}</span>\r\n                    </div>\r\n\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-dark-300\">{t('botControls.total_messages')}:</span>\r\n                      <span className=\"text-white\">{botStatus.stats.total_messages || 0}</span>\r\n                    </div>\r\n\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-dark-300\">{t('botControls.active_sessions')}:</span>\r\n                      <span className=\"text-white\">{botStatus.stats.active_sessions || 0}</span>\r\n                    </div>\r\n                  </>\r\n                )}\r\n\r\n                {botStatus.trigger_stats && (\r\n                  <>\r\n                    <hr className=\"border-dark-600\" />\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-dark-300\">{t('botControls.active_triggers')}:</span>\r\n                      <span className=\"text-white\">{botStatus.trigger_stats.active_triggers || 0}</span>\r\n                    </div>\r\n\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-dark-300\">{t('botControls.active_responses')}:</span>\r\n                      <span className=\"text-white\">{botStatus.trigger_stats.active_responses || 0}</span>\r\n                    </div>\r\n                  </>\r\n                )}\r\n              </div>\r\n            )}\r\n          </GlassCard>\r\n\r\n          {/* Quick Actions */}\r\n          <GlassCard className=\"p-6\">\r\n            <h2 className=\"text-xl font-semibold text-white mb-4\">{t('botControls.quick_actions')}</h2>\r\n\r\n            <div className=\"space-y-3\">\r\n              <GlassButton\r\n                onClick={() => handleBotCommand('clear_cache')}\r\n                className=\"w-full justify-start bg-dark-700 hover:bg-dark-600\"\r\n              >\r\n                {t('botControls.clear_cache')}\r\n              </GlassButton>\r\n\r\n              <GlassButton\r\n                onClick={() => handleBotCommand('reload_config')}\r\n                className=\"w-full justify-start bg-dark-700 hover:bg-dark-600\"\r\n              >\r\n                {t('botControls.reload_config')}\r\n              </GlassButton>\r\n\r\n              <GlassButton\r\n                onClick={() => handleBotCommand('test_connectivity')}\r\n                className=\"w-full justify-start bg-dark-700 hover:bg-dark-600\"\r\n              >\r\n                {t('botControls.test_connectivity')}\r\n              </GlassButton>\r\n\r\n              <GlassButton\r\n                onClick={() => handleBotCommand('generate_report')}\r\n                className=\"w-full justify-start bg-dark-700 hover:bg-dark-600\"\r\n              >\r\n                {t('botControls.generate_report')}\r\n              </GlassButton>\r\n            </div>\r\n          </GlassCard>\r\n\r\n          {/* Recent Activity Preview */}\r\n          <GlassCard className=\"p-6 lg:col-span-2\">\r\n            <div className=\"flex justify-between items-center mb-4\">\r\n              <h2 className=\"text-xl font-semibold text-white\">{t('botControls.recent_activity')}</h2>\r\n              <GlassButton\r\n                onClick={() => setActiveTab('activity')}\r\n                className=\"text-sm\"\r\n              >\r\n                {t('botControls.view_all')}\r\n              </GlassButton>\r\n            </div>\r\n\r\n            <div className=\"space-y-3 max-h-64 overflow-y-auto\">\r\n              {recentActivity.slice(0, 5).map((activity, index) => (\r\n                <div key={index} className=\"flex items-center justify-between py-2 border-b border-dark-700\">\r\n                  <div className=\"flex-1\">\r\n                    <div className=\"text-sm text-white\">{activity.trigger_name || 'Unknown Trigger'}</div>\r\n                    <div className=\"text-xs text-dark-400\">\r\n                      {activity.user_name && `${t('botControls.user_label')} ${activity.user_name}`}\r\n                      {activity.execution_time_ms && ` • ${formatDuration(activity.execution_time_ms)}`}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <span className={`px-2 py-1 rounded text-xs ${\r\n                      activity.success\r\n                        ? 'bg-green-900 text-green-300'\r\n                        : 'bg-red-900 text-red-300'\r\n                    }`}>\r\n                      {activity.success ? t('botControls.success') : t('botControls.failed')}\r\n                    </span>\r\n                    <span className=\"text-xs text-dark-400\">\r\n                      {new Date(activity.created_at).toLocaleTimeString()}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n\r\n              {recentActivity.length === 0 && (\r\n                <div className=\"text-center text-dark-400 py-8\">\r\n                  {t('botControls.no_recent')}\r\n                </div>\r\n              )}\r\n            </div>\r\n          </GlassCard>\r\n        </div>\r\n      )}\r\n\r\n      {activeTab === 'analytics' && (\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n          {/* Trigger Analytics */}\r\n          <GlassCard className=\"p-6\">\r\n            <h2 className=\"text-xl font-semibold text-white mb-4\">{t('botControls.trigger_performance')}</h2>\r\n\r\n            {analytics && (\r\n              <div className=\"space-y-4\">\r\n                <div className=\"grid grid-cols-2 gap-4\">\r\n                  <div className=\"bg-dark-800 rounded-lg p-4 text-center\">\r\n                    <div className=\"text-2xl font-bold text-blue-400\">{analytics.total_executions || 0}</div>\r\n                    <div className=\"text-sm text-dark-400\">{t('botControls.total_executions')}</div>\r\n                  </div>\r\n                  <div className=\"bg-dark-800 rounded-lg p-4 text-center\">\r\n                    <div className=\"text-2xl font-bold text-green-400\">{analytics.successful_executions || 0}</div>\r\n                    <div className=\"text-sm text-dark-400\">{t('botControls.successful')}</div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"text-dark-300\">{t('botControls.success_rate')}:</span>\r\n                  <span className=\"text-white\">\r\n                    {analytics.total_executions > 0\r\n                      ? `${((analytics.successful_executions / analytics.total_executions) * 100).toFixed(1)}%`\r\n                      : 'N/A'\r\n                    }\r\n                  </span>\r\n                </div>\r\n\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"text-dark-300\">{t('botControls.avg_execution_time')}:</span>\r\n                  <span className=\"text-white\">{formatDuration(analytics.average_execution_time * 1000)}</span>\r\n                </div>\r\n\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"text-dark-300\">{t('botControls.failed_executions')}:</span>\r\n                  <span className=\"text-red-400\">{analytics.failed_executions || 0}</span>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </GlassCard>\r\n\r\n          {/* Response Analytics */}\r\n          <GlassCard className=\"p-6\">\r\n            <h2 className=\"text-xl font-semibold text-white mb-4\">{t('botControls.response_performance')}</h2>\r\n\r\n            <div className=\"space-y-4\">\r\n              <div className=\"grid grid-cols-2 gap-4\">\r\n                <div className=\"bg-dark-800 rounded-lg p-4 text-center\">\r\n                  <div className=\"text-2xl font-bold text-purple-400\">0</div>\r\n                  <div className=\"text-sm text-dark-400\">{t('botControls.total_deliveries')}</div>\r\n                </div>\r\n                <div className=\"bg-dark-800 rounded-lg p-4 text-center\">\r\n                  <div className=\"text-2xl font-bold text-green-400\">0</div>\r\n                  <div className=\"text-sm text-dark-400\">{t('botControls.successful')}</div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"flex items-center justify-between\">\r\n                <span className=\"text-dark-300\">{t('botControls.avg_delivery_time')}:</span>\r\n                <span className=\"text-white\">N/A</span>\r\n              </div>\r\n\r\n              <div className=\"flex items-center justify-between\">\r\n                <span className=\"text-dark-300\">{t('botControls.failed_deliveries')}:</span>\r\n                <span className=\"text-red-400\">0</span>\r\n              </div>\r\n            </div>\r\n          </GlassCard>\r\n\r\n          {/* Performance Chart Placeholder */}\r\n          <GlassCard className=\"p-6 lg:col-span-2\">\r\n            <h2 className=\"text-xl font-semibold text-white mb-4\">{t('botControls.performance_trends')}</h2>\r\n            <div className=\"bg-dark-800 rounded-lg p-8 text-center\">\r\n              <div className=\"text-dark-400\">{t('botControls.charts_placeholder')}</div>\r\n              <div className=\"text-sm text-dark-500 mt-2\">{t('botControls.integration_needed')}</div>\r\n            </div>\r\n          </GlassCard>\r\n        </div>\r\n      )}\r\n\r\n      {activeTab === 'activity' && (\r\n        <GlassCard className=\"p-6\">\r\n          <div className=\"flex justify-between items-center mb-4\">\r\n            <h2 className=\"text-xl font-semibold text-white\">{t('botControls.recent_activity')}</h2>\r\n            <div className=\"flex space-x-2\">\r\n              <select className=\"bg-dark-800 border border-dark-600 rounded-lg px-3 py-2 text-white text-sm focus:outline-none focus:border-blue-500\">\r\n                <option value=\"all\">{t('botControls.all_activities')}</option>\r\n                <option value=\"trigger\">{t('botControls.triggers')}</option>\r\n                <option value=\"response\">{t('botControls.responses')}</option>\r\n                <option value=\"error\">{t('botControls.errors')}</option>\r\n              </select>\r\n              <GlassButton\r\n                onClick={loadRecentActivity}\r\n                className=\"text-sm\"\r\n              >\r\n                {t('botControls.refresh')}\r\n              </GlassButton>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"space-y-2 max-h-96 overflow-y-auto\">\r\n            {recentActivity.map((activity, index) => (\r\n              <div key={index} className=\"bg-dark-800 rounded-lg p-4 border border-dark-600\">\r\n                <div className=\"flex justify-between items-start\">\r\n                  <div className=\"flex-1\">\r\n                    <div className=\"flex items-center space-x-2\">\r\n                      <span className=\"font-medium text-white\">\r\n                        {activity.trigger_name || t('botControls.unknown_trigger')}\r\n                      </span>\r\n                      <span className={`px-2 py-1 rounded text-xs ${\r\n                        activity.success\r\n                          ? 'bg-green-900 text-green-300'\r\n                          : 'bg-red-900 text-red-300'\r\n                      }`}>\r\n                        {activity.success ? t('botControls.success') : t('botControls.failed')}\r\n                      </span>\r\n                    </div>\r\n\r\n                    {activity.user_name && (\r\n                      <div className=\"text-sm text-dark-400 mt-1\">\r\n                        {t('botControls.user')} {activity.user_name}\r\n                      </div>\r\n                    )}\r\n\r\n                    {activity.message_text && (\r\n                      <div className=\"text-sm text-dark-400 mt-1 truncate\">\r\n                        {t('botControls.message')} {activity.message_text}\r\n                      </div>\r\n                    )}\r\n\r\n                    <div className=\"flex items-center space-x-4 mt-2 text-xs text-dark-500\">\r\n                      <span>{t('botControls.execution')} {formatDuration(activity.execution_time_ms)}</span>\r\n                      <span>{new Date(activity.created_at).toLocaleString()}</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n\r\n            {recentActivity.length === 0 && (\r\n              <div className=\"text-center text-dark-400 py-8\">\r\n                {t('botControls.no_activity')}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </GlassCard>\r\n      )}\r\n\r\n      {activeTab === 'settings' && (\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n          {/* Bot Configuration */}\r\n          <GlassCard className=\"p-6\">\r\n            <h2 className=\"text-xl font-semibold text-white mb-4\">{t('botControls.bot_configuration')}</h2>\r\n\r\n            <div className=\"space-y-4\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-dark-300 mb-2\">\r\n                  {t('botControls.llm_provider')}\r\n                </label>\r\n                <select className=\"w-full bg-dark-800 border border-dark-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:border-blue-500\">\r\n                  <option value=\"openrouter\">{t('botControls.openrouter')}</option>\r\n                  <option value=\"ollama\">{t('botControls.ollama')}</option>\r\n                </select>\r\n              </div>\r\n\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-dark-300 mb-2\">\r\n                  {t('botControls.model')}\r\n                </label>\r\n                <select className=\"w-full bg-dark-800 border border-dark-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:border-blue-500\">\r\n                  <option value=\"gpt-5-nano\">{t('botControls.gpt5_nano')}</option>\r\n                  <option value=\"gemma3:latest\">{t('botControls.gemma3')}</option>\r\n                </select>\r\n              </div>\r\n\r\n              <div className=\"flex items-center justify-between\">\r\n                <span className=\"text-dark-300\">{t('botControls.web_search')}</span>\r\n                <label className=\"relative inline-flex items-center cursor-pointer\">\r\n                  <input type=\"checkbox\" className=\"sr-only peer\" />\r\n                  <div className=\"w-11 h-6 bg-dark-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\r\n                </label>\r\n              </div>\r\n\r\n              <div className=\"flex items-center justify-between\">\r\n                <span className=\"text-dark-300\">{t('botControls.tools_enabled')}</span>\r\n                <label className=\"relative inline-flex items-center cursor-pointer\">\r\n                  <input type=\"checkbox\" defaultChecked className=\"sr-only peer\" />\r\n                  <div className=\"w-11 h-6 bg-dark-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\r\n                </label>\r\n              </div>\r\n            </div>\r\n          </GlassCard>\r\n\r\n          {/* System Settings */}\r\n          <GlassCard className=\"p-6\">\r\n            <h2 className=\"text-xl font-semibold text-white mb-4\">{t('botControls.system_settings')}</h2>\r\n\r\n            <div className=\"space-y-4\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-dark-300 mb-2\">\r\n                  {t('botControls.default_language')}\r\n                </label>\r\n                <select className=\"w-full bg-dark-800 border border-dark-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:border-blue-500\">\r\n                  <option value=\"en\">{t('botControls.english')}</option>\r\n                  <option value=\"ru\">{t('botControls.russian')}</option>\r\n                </select>\r\n              </div>\r\n\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-dark-300 mb-2\">\r\n                  {t('botControls.max_response_length')}\r\n                </label>\r\n                <input\r\n                  type=\"number\"\r\n                  min=\"50\"\r\n                  max=\"500\"\r\n                  defaultValue=\"200\"\r\n                  className=\"w-full bg-dark-800 border border-dark-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:border-blue-500\"\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-dark-300 mb-2\">\r\n                  {t('botControls.trigger_cooldown')}\r\n                </label>\r\n                <input\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  max=\"300\"\r\n                  defaultValue=\"30\"\r\n                  className=\"w-full bg-dark-800 border border-dark-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:border-blue-500\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"flex items-center justify-between\">\r\n                <span className=\"text-dark-300\">{t('botControls.emergency_mode')}</span>\r\n                <label className=\"relative inline-flex items-center cursor-pointer\">\r\n                  <input type=\"checkbox\" className=\"sr-only peer\" />\r\n                  <div className=\"w-11 h-6 bg-dark-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-red-600\"></div>\r\n                </label>\r\n              </div>\r\n            </div>\r\n          </GlassCard>\r\n\r\n          {/* Save Settings */}\r\n          <GlassCard className=\"p-6 lg:col-span-2\">\r\n            <div className=\"flex justify-between items-center\">\r\n              <div>\r\n                <h3 className=\"text-lg font-semibold text-white\">{t('botControls.save_configuration')}</h3>\r\n                <p className=\"text-sm text-dark-400\">{t('botControls.restart_required')}</p>\r\n              </div>\r\n              <GlassButton className=\"bg-green-600 hover:bg-green-700\">\r\n                {t('botControls.save_settings')}\r\n              </GlassButton>\r\n            </div>\r\n          </GlassCard>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BotControls;"],"names":["BotControls","t","useTranslation","botStatus","setBotStatus","useState","analytics","setAnalytics","recentActivity","setRecentActivity","isLoading","setIsLoading","activeTab","setActiveTab","useEffect","loadBotData","interval","setInterval","clearInterval","async","statusRes","analyticsRes","Promise","all","fetch","ok","statusData","json","analyticsData","loadRecentActivity","error","console","response","data","recent_logs","handleBotCommand","command","parameters","arguments","length","undefined","method","headers","body","JSON","stringify","result","alert","concat","message","formatDuration","ms","toFixed","_jsxs","className","children","_jsx","GlassButton","onClick","id","label","map","tab","GlassCard","status","uptime","stats","_Fragment","total_users","total_messages","active_sessions","trigger_stats","active_triggers","active_responses","slice","activity","index","trigger_name","user_name","execution_time_ms","success","Date","created_at","toLocaleTimeString","total_executions","successful_executions","average_execution_time","failed_executions","value","message_text","toLocaleString","type","defaultChecked","min","max","defaultValue"],"sourceRoot":""}