{"version":3,"file":"static/js/400.0a38caa4.chunk.js","mappings":"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","sources":["components/processes/ProcessList.js","components/processes/ProcessBuilder.js","components/processes/ProcessMonitor.js","components/processes/ProcessTemplates.js","components/Processes.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport GlassCard from '../ui/GlassCard';\n\nconst ProcessList = ({ onStatsUpdate }) => {\n  const { t } = useTranslation();\n  const [processes, setProcesses] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [filters, setFilters] = useState({\n    active_only: true,\n    template_id: '',\n    created_by: ''\n  });\n\n  useEffect(() => {\n    fetchProcesses();\n  }, [filters]);\n\n  const fetchProcesses = async () => {\n    try {\n      const params = new URLSearchParams();\n      if (filters.active_only !== null) params.append('active_only', filters.active_only);\n      if (filters.template_id) params.append('template_id', filters.template_id);\n      if (filters.created_by) params.append('created_by', filters.created_by);\n\n      const response = await fetch(`/api/processes/?${params}`);\n      const data = await response.json();\n      setProcesses(data.processes || []);\n    } catch (error) {\n      console.error('Error fetching processes:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleExecuteProcess = async (processId) => {\n    try {\n      const response = await fetch(`/api/processes/${processId}/execute`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ trigger_data: { manual: true } })\n      });\n\n      if (response.ok) {\n         alert(t('processList.executed_successfully'));\n         fetchProcesses();\n         if (onStatsUpdate) onStatsUpdate();\n       }\n     } catch (error) {\n       console.error('Error executing process:', error);\n       alert(t('processList.error_executing'));\n     }\n  };\n\n  const handleDeactivateProcess = async (processId) => {\n    // For now, we'll just deactivate without confirmation\n    // In a real app, you'd show a proper confirmation dialog\n    try {\n      const response = await fetch(`/api/processes/${processId}`, {\n        method: 'DELETE'\n      });\n\n      if (response.ok) {\n         fetchProcesses();\n         if (onStatsUpdate) onStatsUpdate();\n       }\n     } catch (error) {\n       console.error('Error deactivating process:', error);\n       alert(t('processList.error_deactivating'));\n     }\n  };\n\n  const formatTimestamp = (timestamp) => {\n    return new Date(timestamp).toLocaleString();\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-96\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-accent-cyan\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Filters */}\n      <GlassCard>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n           <div>\n             <label className=\"block text-sm font-medium text-gray-300 mb-2\">{t('processList.status')}</label>\n             <select\n               value={filters.active_only}\n               onChange={(e) => setFilters({ ...filters, active_only: e.target.value === 'true' })}\n               className=\"w-full px-3 py-2 bg-dark-800 border border-dark-600 rounded-lg text-white focus:border-accent-cyan focus:outline-none\"\n             >\n               <option value={true}>{t('processList.active_only')}</option>\n               <option value={false}>{t('processList.all_processes')}</option>\n             </select>\n           </div>\n           <div>\n             <label className=\"block text-sm font-medium text-gray-300 mb-2\">{t('processList.template_id')}</label>\n             <input\n               type=\"text\"\n               value={filters.template_id}\n               onChange={(e) => setFilters({ ...filters, template_id: e.target.value })}\n               placeholder={t('processList.filter_by_template')}\n               className=\"w-full px-3 py-2 bg-dark-800 border border-dark-600 rounded-lg text-white focus:border-accent-cyan focus:outline-none\"\n             />\n           </div>\n           <div>\n             <label className=\"block text-sm font-medium text-gray-300 mb-2\">{t('processList.created_by')}</label>\n             <input\n               type=\"text\"\n               value={filters.created_by}\n               onChange={(e) => setFilters({ ...filters, created_by: e.target.value })}\n               placeholder={t('processList.filter_by_creator')}\n               className=\"w-full px-3 py-2 bg-dark-800 border border-dark-600 rounded-lg text-white focus:border-accent-cyan focus:outline-none\"\n             />\n           </div>\n         </div>\n      </GlassCard>\n\n      {/* Processes List */}\n      <GlassCard>\n        <div className=\"space-y-3\">\n          {processes.map((process) => (\n            <div\n              key={process.id}\n              className=\"p-4 bg-dark-800/30 rounded-lg border border-dark-600 hover:border-accent-cyan/30 transition-colors\"\n            >\n              <div className=\"flex justify-between items-start\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-3 mb-2\">\n                    <h3 className=\"font-semibold text-white\">{process.name}</h3>\n                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${process.is_active ? 'bg-green-400/20 text-green-400' : 'bg-red-400/20 text-red-400'}`}>\n                      {process.is_active ? t('processList.active') : t('processList.inactive')}\n                    </span>\n                  </div>\n                  <p className=\"text-gray-300 text-sm mb-2\">{process.description}</p>\n                  <div className=\"flex items-center space-x-4 text-xs text-gray-400\">\n                    <span>{t('processList.executions')} {process.execution_count}</span>\n                    <span>{t('processList.success_rate')} {process.success_rate?.toFixed(1) || 0}%</span>\n                    <span>{t('processList.created')} {formatTimestamp(process.created_at)}</span>\n                    {process.last_executed && <span>{t('processList.last_run')} {formatTimestamp(process.last_executed)}</span>}\n                  </div>\n                  <div className=\"flex items-center space-x-4 text-xs text-gray-400 mt-1\">\n                    <span>{t('processList.by')} {process.created_by_username}</span>\n                    {process.template_name && <span>{t('processList.template')} {process.template_name}</span>}\n                  </div>\n                </div>\n                <div className=\"flex space-x-2\">\n                  <button\n                    onClick={() => handleExecuteProcess(process.id)}\n                    className=\"px-3 py-1 bg-accent-cyan text-dark-900 rounded text-sm font-medium hover:bg-accent-cyan/80\"\n                  >\n                    {t('processList.execute')}\n                  </button>\n                  {process.is_active && (\n                    <button\n                      onClick={() => handleDeactivateProcess(process.id)}\n                      className=\"px-3 py-1 bg-red-600 text-white rounded text-sm font-medium hover:bg-red-500\"\n                    >\n                      {t('processList.deactivate')}\n                    </button>\n                  )}\n                </div>\n              </div>\n            </div>\n          ))}\n          {processes.length === 0 && (\n            <p className=\"text-gray-400 text-center py-8\">{t('processList.no_processes')}</p>\n          )}\n        </div>\n      </GlassCard>\n    </div>\n  );\n};\n\nexport default ProcessList;","import React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport GlassCard from '../ui/GlassCard';\nimport GlassButton from '../ui/GlassButton';\n\nconst ProcessBuilder = ({ onStatsUpdate }) => {\n  const { t } = useTranslation();\n  const [process, setProcess] = useState({\n    name: '',\n    description: '',\n    triggers: [],\n    actions: []\n  });\n  const [templates, setTemplates] = useState([]);\n  const [showTemplateModal, setShowTemplateModal] = useState(false);\n\n  useEffect(() => {\n    fetchTemplates();\n  }, []);\n\n  const fetchTemplates = async () => {\n    try {\n      const response = await fetch('/api/processes/templates/');\n      const data = await response.json();\n      setTemplates(data.templates || []);\n    } catch (error) {\n      console.error('Error fetching templates:', error);\n    }\n  };\n\n  const handleCreateProcess = async (e) => {\n    e.preventDefault();\n    try {\n      const response = await fetch('/api/processes/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(process),\n      });\n\n      if (response.ok) {\n        alert(t('processBuilder.process_created'));\n        setProcess({\n          name: '',\n          description: '',\n          triggers: [],\n          actions: []\n        });\n        if (onStatsUpdate) onStatsUpdate();\n      }\n    } catch (error) {\n      console.error('Error creating process:', error);\n      alert(t('processBuilder.error_creating'));\n    }\n  };\n\n  const handleLoadTemplate = async (templateId) => {\n    try {\n      const response = await fetch(`/api/processes/templates/${templateId}/instantiate`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          name: `${t('processBuilder.new_process_from')} ${templates.find(t => t.id === templateId)?.name}`,\n          description: t('processBuilder.created_from_template')\n        }),\n      });\n\n      if (response.ok) {\n        alert(t('processBuilder.process_from_template'));\n        setShowTemplateModal(false);\n        if (onStatsUpdate) onStatsUpdate();\n      }\n    } catch (error) {\n      console.error('Error creating process from template:', error);\n      alert(t('processBuilder.error_from_template'));\n    }\n  };\n\n  const addTrigger = () => {\n    setProcess({\n      ...process,\n      triggers: [...process.triggers, {\n        trigger_type: 'manual',\n        trigger_config: {},\n        conditions: {},\n        priority: 0,\n        is_active: true\n      }]\n    });\n  };\n\n  const updateTrigger = (index, field, value) => {\n    const newTriggers = [...process.triggers];\n    newTriggers[index] = { ...newTriggers[index], [field]: value };\n    setProcess({ ...process, triggers: newTriggers });\n  };\n\n  const removeTrigger = (index) => {\n    setProcess({\n      ...process,\n      triggers: process.triggers.filter((_, i) => i !== index)\n    });\n  };\n\n  const addAction = () => {\n    setProcess({\n      ...process,\n      actions: [...process.actions, {\n        action_type: 'send_message',\n        action_config: {},\n        conditions: {},\n        action_order: process.actions.length + 1,\n        timeout_seconds: 30,\n        retry_count: 0\n      }]\n    });\n  };\n\n  const updateAction = (index, field, value) => {\n    const newActions = [...process.actions];\n    newActions[index] = { ...newActions[index], [field]: value };\n    setProcess({ ...process, actions: newActions });\n  };\n\n  const removeAction = (index) => {\n    setProcess({\n      ...process,\n      actions: process.actions.filter((_, i) => i !== index)\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold text-white\">{t('processBuilder.title')}</h2>\n        <GlassButton\n          onClick={() => setShowTemplateModal(true)}\n          variant=\"secondary\"\n        >\n          {t('processBuilder.load_template')}\n        </GlassButton>\n      </div>\n\n      <form onSubmit={handleCreateProcess}>\n        {/* Basic Info */}\n        <GlassCard>\n          <h3 className=\"text-lg font-semibold text-white mb-4\">{t('processBuilder.process_info')}</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">{t('processBuilder.process_name')}</label>\n              <input\n                type=\"text\"\n                value={process.name}\n                onChange={(e) => setProcess({ ...process, name: e.target.value })}\n                className=\"w-full px-3 py-2 bg-dark-800 border border-dark-600 rounded-lg text-white focus:border-accent-cyan focus:outline-none\"\n                required\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">{t('processBuilder.description')}</label>\n              <input\n                type=\"text\"\n                value={process.description}\n                onChange={(e) => setProcess({ ...process, description: e.target.value })}\n                className=\"w-full px-3 py-2 bg-dark-800 border border-dark-600 rounded-lg text-white focus:border-accent-cyan focus:outline-none\"\n              />\n            </div>\n          </div>\n        </GlassCard>\n\n        {/* Triggers */}\n        <GlassCard>\n          <div className=\"flex justify-between items-center mb-4\">\n            <h3 className=\"text-lg font-semibold text-white\">{t('processBuilder.triggers')}</h3>\n            <GlassButton type=\"button\" onClick={addTrigger} variant=\"secondary\" className=\"text-sm\">\n              {t('processBuilder.add_trigger')}\n            </GlassButton>\n          </div>\n          <div className=\"space-y-3\">\n            {process.triggers.map((trigger, index) => (\n              <div key={index} className=\"p-4 bg-dark-800/50 rounded-lg\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-300 mb-2\">{t('processBuilder.trigger_type')}</label>\n                    <select\n                      value={trigger.trigger_type}\n                      onChange={(e) => updateTrigger(index, 'trigger_type', e.target.value)}\n                      className=\"w-full px-3 py-2 bg-dark-800 border border-dark-600 rounded-lg text-white focus:border-accent-cyan focus:outline-none\"\n                    >\n                      <option value=\"manual\">{t('processBuilder.manual')}</option>\n                      <option value=\"zone_entry\">{t('processBuilder.zone_entry')}</option>\n                      <option value=\"zone_exit\">{t('processBuilder.zone_exit')}</option>\n                      <option value=\"alert_created\">{t('processBuilder.alert_created')}</option>\n                      <option value=\"message_received\">{t('processBuilder.message_received')}</option>\n                      <option value=\"time_schedule\">{t('processBuilder.time_schedule')}</option>\n                    </select>\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-300 mb-2\">{t('processBuilder.priority')}</label>\n                    <input\n                      type=\"number\"\n                      value={trigger.priority}\n                      onChange={(e) => updateTrigger(index, 'priority', parseInt(e.target.value))}\n                      className=\"w-full px-3 py-2 bg-dark-800 border border-dark-600 rounded-lg text-white focus:border-accent-cyan focus:outline-none\"\n                    />\n                  </div>\n                  <div className=\"flex items-end\">\n                    <button\n                      type=\"button\"\n                      onClick={() => removeTrigger(index)}\n                      className=\"px-3 py-2 bg-red-600 text-white rounded text-sm font-medium hover:bg-red-500\"\n                    >\n                      {t('processBuilder.remove')}\n                    </button>\n                  </div>\n                </div>\n              </div>\n            ))}\n            {process.triggers.length === 0 && (\n              <p className=\"text-gray-400 text-center py-4\">{t('processBuilder.no_triggers')}</p>\n            )}\n          </div>\n        </GlassCard>\n\n        {/* Actions */}\n        <GlassCard>\n          <div className=\"flex justify-between items-center mb-4\">\n            <h3 className=\"text-lg font-semibold text-white\">{t('processBuilder.actions')}</h3>\n            <GlassButton type=\"button\" onClick={addAction} variant=\"secondary\" className=\"text-sm\">\n              {t('processBuilder.add_action')}\n            </GlassButton>\n          </div>\n          <div className=\"space-y-3\">\n            {process.actions.map((action, index) => (\n              <div key={index} className=\"p-4 bg-dark-800/50 rounded-lg\">\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-300 mb-2\">{t('processBuilder.action_type')}</label>\n                    <select\n                      value={action.action_type}\n                      onChange={(e) => updateAction(index, 'action_type', e.target.value)}\n                      className=\"w-full px-3 py-2 bg-dark-800 border border-dark-600 rounded-lg text-white focus:border-accent-cyan focus:outline-none\"\n                    >\n                      <option value=\"send_message\">{t('processBuilder.send_message')}</option>\n                      <option value=\"create_alert\">{t('processBuilder.create_alert')}</option>\n                      <option value=\"update_zone\">{t('processBuilder.update_zone')}</option>\n                      <option value=\"trigger_bot\">{t('processBuilder.trigger_bot')}</option>\n                      <option value=\"update_group\">{t('processBuilder.update_group')}</option>\n                      <option value=\"send_notification\">{t('processBuilder.send_notification')}</option>\n                    </select>\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-300 mb-2\">{t('processBuilder.order')}</label>\n                    <input\n                      type=\"number\"\n                      value={action.action_order}\n                      onChange={(e) => updateAction(index, 'action_order', parseInt(e.target.value))}\n                      className=\"w-full px-3 py-2 bg-dark-800 border border-dark-600 rounded-lg text-white focus:border-accent-cyan focus:outline-none\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-300 mb-2\">{t('processBuilder.timeout_s')}</label>\n                    <input\n                      type=\"number\"\n                      value={action.timeout_seconds}\n                      onChange={(e) => updateAction(index, 'timeout_seconds', parseInt(e.target.value))}\n                      className=\"w-full px-3 py-2 bg-dark-800 border border-dark-600 rounded-lg text-white focus:border-accent-cyan focus:outline-none\"\n                    />\n                  </div>\n                  <div className=\"flex items-end\">\n                    <button\n                      type=\"button\"\n                      onClick={() => removeAction(index)}\n                      className=\"px-3 py-2 bg-red-600 text-white rounded text-sm font-medium hover:bg-red-500\"\n                    >\n                      {t('processBuilder.remove')}\n                    </button>\n                  </div>\n                </div>\n              </div>\n            ))}\n            {process.actions.length === 0 && (\n              <p className=\"text-gray-400 text-center py-4\">{t('processBuilder.no_actions')}</p>\n            )}\n          </div>\n        </GlassCard>\n\n        <div className=\"flex space-x-3\">\n          <GlassButton type=\"submit\" variant=\"primary\">\n            {t('processBuilder.create_process')}\n          </GlassButton>\n        </div>\n      </form>\n\n      {/* Template Modal */}\n      {showTemplateModal && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n          <GlassCard className=\"w-full max-w-2xl mx-4 max-h-[80vh] overflow-y-auto\">\n            <div className=\"flex justify-between items-start mb-4\">\n              <h2 className=\"text-xl font-bold text-white\">{t('processBuilder.load_from_template')}</h2>\n              <button\n                onClick={() => setShowTemplateModal(false)}\n                className=\"text-gray-400 hover:text-white\"\n              >\n                <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                </svg>\n              </button>\n            </div>\n\n            <div className=\"space-y-3\">\n              {templates.map((template) => (\n                <div\n                  key={template.id}\n                  className=\"p-4 bg-dark-800/50 rounded-lg border border-dark-600 hover:border-accent-cyan/30 transition-colors\"\n                >\n                  <div className=\"flex justify-between items-start\">\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-semibold text-white\">{template.name}</h3>\n                      <p className=\"text-gray-300 text-sm\">{template.description}</p>\n                      <div className=\"flex items-center space-x-4 text-xs text-gray-400 mt-2\">\n                        <span>{t('processBuilder.category')}: {template.category}</span>\n                        <span>{t('processBuilder.usage')}: {template.usage_count}</span>\n                      </div>\n                    </div>\n                    <GlassButton\n                      onClick={() => handleLoadTemplate(template.id)}\n                      variant=\"primary\"\n                      className=\"text-sm\"\n                    >\n                      {t('processBuilder.use_template')}\n                    </GlassButton>\n                  </div>\n                </div>\n              ))}\n              {templates.length === 0 && (\n                <p className=\"text-gray-400 text-center py-8\">{t('processBuilder.no_templates')}</p>\n              )}\n            </div>\n          </GlassCard>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ProcessBuilder;","import React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport GlassCard from '../ui/GlassCard';\n\nconst ProcessMonitor = ({ onStatsUpdate }) => {\n  const { t } = useTranslation();\n  const [executions, setExecutions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedExecution, setSelectedExecution] = useState(null);\n  const [showDetailsModal, setShowDetailsModal] = useState(false);\n  const [filters, setFilters] = useState({\n    process_id: '',\n    status: ''\n  });\n\n  useEffect(() => {\n    fetchExecutions();\n  }, [filters]);\n\n  const fetchExecutions = async () => {\n    try {\n      const params = new URLSearchParams();\n      if (filters.process_id) params.append('process_id', filters.process_id);\n      if (filters.status) params.append('status', filters.status);\n\n      const response = await fetch(`/api/processes/executions/?${params}`);\n      const data = await response.json();\n      setExecutions(data.executions || []);\n    } catch (error) {\n      console.error('Error fetching executions:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchExecutionDetails = async (executionId) => {\n    try {\n      const response = await fetch(`/api/processes/executions/${executionId}`);\n      const data = await response.json();\n      setSelectedExecution(data);\n      setShowDetailsModal(true);\n    } catch (error) {\n      console.error('Error fetching execution details:', error);\n    }\n  };\n\n  const getStatusBadgeColor = (status) => {\n    const colors = {\n      running: 'bg-blue-400/20 text-blue-400 border-blue-400/30',\n      completed: 'bg-green-400/20 text-green-400 border-green-400/30',\n      failed: 'bg-red-400/20 text-red-400 border-red-400/30',\n      timeout: 'bg-yellow-400/20 text-yellow-400 border-yellow-400/30'\n    };\n    return colors[status] || 'bg-gray-400/20 text-gray-400 border-gray-400/30';\n  };\n\n  const formatTimestamp = (timestamp) => {\n    return new Date(timestamp).toLocaleString();\n  };\n\n  const formatDuration = (startTime, endTime) => {\n    if (!endTime) return t('processMonitor.running_duration');\n    const duration = new Date(endTime) - new Date(startTime);\n    return `${(duration / 1000).toFixed(2)}s`;\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-96\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-accent-cyan\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Filters */}\n      <GlassCard>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n           <div>\n             <label className=\"block text-sm font-medium text-gray-300 mb-2\">{t('processMonitor.process_id')}</label>\n             <input\n               type=\"text\"\n               value={filters.process_id}\n               onChange={(e) => setFilters({ ...filters, process_id: e.target.value })}\n               placeholder={t('processMonitor.filter_process')}\n               className=\"w-full px-3 py-2 bg-dark-800 border border-dark-600 rounded-lg text-white focus:border-accent-cyan focus:outline-none\"\n             />\n           </div>\n           <div>\n             <label className=\"block text-sm font-medium text-gray-300 mb-2\">{t('processMonitor.status')}</label>\n             <select\n               value={filters.status}\n               onChange={(e) => setFilters({ ...filters, status: e.target.value })}\n               className=\"w-full px-3 py-2 bg-dark-800 border border-dark-600 rounded-lg text-white focus:border-accent-cyan focus:outline-none\"\n             >\n               <option value=\"\">{t('processMonitor.all_statuses')}</option>\n               <option value=\"running\">{t('processMonitor.running')}</option>\n               <option value=\"completed\">{t('processMonitor.completed')}</option>\n               <option value=\"failed\">{t('processMonitor.failed')}</option>\n               <option value=\"timeout\">{t('processMonitor.timeout')}</option>\n             </select>\n           </div>\n         </div>\n      </GlassCard>\n\n      {/* Executions List */}\n      <GlassCard>\n        <div className=\"space-y-3\">\n          {executions.map((execution) => (\n            <div\n              key={execution.id}\n              className=\"p-4 bg-dark-800/30 rounded-lg border border-dark-600 hover:border-accent-cyan/30 transition-colors cursor-pointer\"\n              onClick={() => fetchExecutionDetails(execution.id)}\n            >\n              <div className=\"flex justify-between items-start\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-3 mb-2\">\n                    <h3 className=\"font-semibold text-white\">{execution.process_name}</h3>\n                    <span className={`px-2 py-1 rounded-full text-xs font-medium border ${getStatusBadgeColor(execution.status)}`}>\n                      {execution.status.toUpperCase()}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center space-x-4 text-xs text-gray-400\">\n                    <span>{t('processMonitor.execution_id')} {execution.id}</span>\n                    <span>{t('processMonitor.triggered_by')} {execution.triggered_by_username || execution.triggered_by}</span>\n                    <span>{t('processMonitor.started')} {formatTimestamp(execution.started_at)}</span>\n                    {execution.completed_at && <span>{t('processMonitor.duration')} {formatDuration(execution.started_at, execution.completed_at)}</span>}\n                  </div>\n                  <div className=\"flex items-center space-x-4 text-xs text-gray-400 mt-1\">\n                    <span>{t('processMonitor.steps')} {execution.steps_completed}/{execution.total_steps || 'N/A'}</span>\n                    {execution.execution_time_ms && <span>{t('processMonitor.time')} {(execution.execution_time_ms / 1000).toFixed(2)}s</span>}\n                  </div>\n                  {execution.error_message && (\n                    <div className=\"mt-2 p-2 bg-red-900/20 border border-red-600 rounded text-xs text-red-400\">\n                      {t('processMonitor.error')} {execution.error_message}\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          ))}\n          {executions.length === 0 && (\n            <p className=\"text-gray-400 text-center py-8\">{t('processMonitor.no_executions')}</p>\n          )}\n        </div>\n      </GlassCard>\n\n      {/* Execution Details Modal */}\n      {showDetailsModal && selectedExecution && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n          <GlassCard className=\"w-full max-w-4xl mx-4 max-h-[90vh] overflow-y-auto\">\n            <div className=\"flex justify-between items-start mb-4\">\n              <h2 className=\"text-xl font-bold text-white\">{t('processMonitor.details')}</h2>\n              <button\n                onClick={() => setShowDetailsModal(false)}\n                className=\"text-gray-400 hover:text-white\"\n              >\n                <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                </svg>\n              </button>\n            </div>\n\n            <div className=\"space-y-4\">\n              {/* Execution Info */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-1\">{t('processMonitor.process')}</label>\n                  <p className=\"text-white\">{selectedExecution.process_name}</p>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-1\">{t('processMonitor.status_label')}</label>\n                  <span className={`px-2 py-1 rounded-full text-xs font-medium border ${getStatusBadgeColor(selectedExecution.status)}`}>\n                    {selectedExecution.status.toUpperCase()}\n                  </span>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-1\">{t('processMonitor.started_label')}</label>\n                  <p className=\"text-white\">{formatTimestamp(selectedExecution.started_at)}</p>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-1\">{t('processMonitor.completed')}</label>\n                  <p className=\"text-white\">\n                    {selectedExecution.completed_at ? formatTimestamp(selectedExecution.completed_at) : t('processMonitor.not_completed')}\n                  </p>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-1\">{t('processMonitor.triggered_by_label')}</label>\n                  <p className=\"text-white\">{selectedExecution.triggered_by}</p>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-1\">{t('processMonitor.duration_label')}</label>\n                  <p className=\"text-white\">{formatDuration(selectedExecution.started_at, selectedExecution.completed_at)}</p>\n                </div>\n              </div>\n\n              {/* Trigger Event */}\n              {selectedExecution.trigger_event && (\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-1\">{t('processMonitor.trigger_event')}</label>\n                  <pre className=\"text-white bg-dark-800/50 p-3 rounded text-xs overflow-x-auto\">\n                    {JSON.stringify(JSON.parse(selectedExecution.trigger_event), null, 2)}\n                  </pre>\n                </div>\n              )}\n\n              {/* Steps */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-300 mb-2\">{t('processMonitor.execution_steps')}</label>\n                <div className=\"space-y-2\">\n                  {selectedExecution.steps && selectedExecution.steps.map((step, index) => (\n                    <div key={index} className=\"p-3 bg-dark-800/30 rounded border border-dark-600\">\n                      <div className=\"flex justify-between items-start\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-3 mb-2\">\n                            <span className=\"font-medium text-white\">{t('processMonitor.step')} {index + 1}</span>\n                            <span className={`px-2 py-1 rounded-full text-xs font-medium border ${getStatusBadgeColor(step.status)}`}>\n                              {step.status.toUpperCase()}\n                            </span>\n                            <span className=\"text-gray-400 text-sm\">{step.action_type}</span>\n                          </div>\n                          <div className=\"text-xs text-gray-400\">\n                            {t('processMonitor.started')}: {formatTimestamp(step.started_at)}\n                            {step.completed_at && ` | ${t('processMonitor.completed')}: ${formatTimestamp(step.completed_at)}`}\n                            {step.execution_time_ms && ` | ${t('processMonitor.duration')}: ${(step.execution_time_ms / 1000).toFixed(2)}s`}\n                          </div>\n                          {step.result && (\n                            <pre className=\"text-white bg-dark-900/50 p-2 rounded text-xs mt-2 overflow-x-auto\">\n                              {JSON.stringify(JSON.parse(step.result), null, 2)}\n                            </pre>\n                          )}\n                          {step.error_message && (\n                            <div className=\"mt-2 p-2 bg-red-900/20 border border-red-600 rounded text-xs text-red-400\">\n                              {t('processMonitor.error')} {step.error_message}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                  {(!selectedExecution.steps || selectedExecution.steps.length === 0) && (\n                    <p className=\"text-gray-400 text-center py-4\">{t('processMonitor.no_steps')}</p>\n                  )}\n                </div>\n              </div>\n            </div>\n          </GlassCard>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ProcessMonitor;","import React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport GlassCard from '../ui/GlassCard';\nimport GlassButton from '../ui/GlassButton';\n\nconst ProcessTemplates = ({ onStatsUpdate }) => {\n  const { t } = useTranslation();\n  const [templates, setTemplates] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [selectedTemplate, setSelectedTemplate] = useState(null);\n  const [showDetailsModal, setShowDetailsModal] = useState(false);\n  const [createForm, setCreateForm] = useState({\n    process_id: '',\n    name: '',\n    description: '',\n    category: 'emergency'\n  });\n\n  useEffect(() => {\n    fetchTemplates();\n  }, []);\n\n  const fetchTemplates = async () => {\n    try {\n      const response = await fetch('/api/processes/templates/');\n      const data = await response.json();\n      setTemplates(data.templates || []);\n    } catch (error) {\n      console.error('Error fetching templates:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateTemplate = async (e) => {\n    e.preventDefault();\n    try {\n      const response = await fetch('/api/processes/templates/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(createForm),\n      });\n\n      if (response.ok) {\n        alert(t('processTemplates.template_created'));\n        setShowCreateModal(false);\n        setCreateForm({\n          process_id: '',\n          name: '',\n          description: '',\n          category: 'emergency'\n        });\n        fetchTemplates();\n      }\n    } catch (error) {\n      console.error('Error creating template:', error);\n      alert(t('processTemplates.error_creating_template'));\n    }\n  };\n\n  const handleInstantiateTemplate = async (templateId, customName = '') => {\n    try {\n      const response = await fetch(`/api/processes/templates/${templateId}/instantiate`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          name: customName || `Process from ${templates.find(t => t.id === templateId)?.name}`,\n          description: 'Created from template'\n        }),\n      });\n\n      if (response.ok) {\n        alert(t('processTemplates.process_from_template_success'));\n        if (onStatsUpdate) onStatsUpdate();\n      }\n    } catch (error) {\n      console.error('Error instantiating template:', error);\n      alert(t('processTemplates.error_from_template'));\n    }\n  };\n\n  const showTemplateDetails = (template) => {\n    setSelectedTemplate(template);\n    setShowDetailsModal(true);\n  };\n\n  const getCategoryColor = (category) => {\n    const colors = {\n      emergency: 'text-red-400',\n      maintenance: 'text-yellow-400',\n      communication: 'text-blue-400',\n      monitoring: 'text-green-400'\n    };\n    return colors[category] || 'text-gray-400';\n  };\n\n  const formatTimestamp = (timestamp) => {\n    return new Date(timestamp).toLocaleString();\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-96\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-accent-cyan\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold text-white\">{t('processTemplates.title')}</h2>\n        <GlassButton\n          onClick={() => setShowCreateModal(true)}\n          variant=\"primary\"\n        >\n          {t('processTemplates.create_template')}\n        </GlassButton>\n      </div>\n\n      {/* Templates Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {templates.map((template) => (\n          <GlassCard key={template.id} className=\"cursor-pointer hover:border-accent-cyan/30 transition-colors\">\n            <div onClick={() => showTemplateDetails(template)}>\n              <div className=\"flex justify-between items-start mb-3\">\n                <h3 className=\"font-semibold text-white text-lg\">{template.name}</h3>\n                <span className={`px-2 py-1 rounded-full text-xs font-medium ${getCategoryColor(template.category)} bg-current/20`}>\n                  {template.category.toUpperCase()}\n                </span>\n              </div>\n              <p className=\"text-gray-300 text-sm mb-3\">{template.description}</p>\n              <div className=\"flex items-center justify-between text-xs text-gray-400\">\n                <span>{t('processTemplates.usage')} {template.usage_count}</span>\n                <span>{t('processTemplates.by')} {template.created_by_username}</span>\n              </div>\n              <div className=\"text-xs text-gray-400 mt-1\">\n                {t('processTemplates.created')} {formatTimestamp(template.created_at)}\n              </div>\n            </div>\n            <div className=\"flex space-x-2 mt-4\">\n              <GlassButton\n                onClick={(e) => {\n                  e.stopPropagation();\n                  const customName = prompt(t('processTemplates.enter_process_name'), `Process from ${template.name}`);\n                  if (customName) handleInstantiateTemplate(template.id, customName);\n                }}\n                variant=\"primary\"\n                className=\"flex-1 text-sm\"\n              >\n                {t('processTemplates.use_template')}\n              </GlassButton>\n            </div>\n          </GlassCard>\n        ))}\n        {templates.length === 0 && (\n          <div className=\"col-span-full\">\n            <GlassCard>\n              <p className=\"text-gray-400 text-center py-8\">{t('processTemplates.no_templates')}</p>\n            </GlassCard>\n          </div>\n        )}\n      </div>\n\n      {/* Create Template Modal */}\n      {showCreateModal && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n          <GlassCard className=\"w-full max-w-lg mx-4\">\n            <form onSubmit={handleCreateTemplate}>\n              <h2 className=\"text-xl font-bold text-white mb-4\">{t('processTemplates.create_process_template')}</h2>\n\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">Process ID</label>\n                  <input\n                    type=\"number\"\n                    value={createForm.process_id}\n                    onChange={(e) => setCreateForm({ ...createForm, process_id: e.target.value })}\n                    placeholder=\"ID of existing process\"\n                    className=\"w-full px-3 py-2 bg-dark-800 border border-dark-600 rounded-lg text-white focus:border-accent-cyan focus:outline-none\"\n                    required\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">{t('processTemplates.template_name')}</label>\n                  <input\n                    type=\"text\"\n                    value={createForm.name}\n                    onChange={(e) => setCreateForm({ ...createForm, name: e.target.value })}\n                    placeholder={t('processTemplates.template_name_placeholder')}\n                    className=\"w-full px-3 py-2 bg-dark-800 border border-dark-600 rounded-lg text-white focus:border-accent-cyan focus:outline-none\"\n                    required\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">{t('processTemplates.description')}</label>\n                  <textarea\n                    value={createForm.description}\n                    onChange={(e) => setCreateForm({ ...createForm, description: e.target.value })}\n                    placeholder={t('processTemplates.template_desc_placeholder')}\n                    rows={3}\n                    className=\"w-full px-3 py-2 bg-dark-800 border border-dark-600 rounded-lg text-white focus:border-accent-cyan focus:outline-none\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-2\">{t('processTemplates.category')}</label>\n                  <select\n                    value={createForm.category}\n                    onChange={(e) => setCreateForm({ ...createForm, category: e.target.value })}\n                    className=\"w-full px-3 py-2 bg-dark-800 border border-dark-600 rounded-lg text-white focus:border-accent-cyan focus:outline-none\"\n                  >\n                    <option value=\"emergency\">{t('processTemplates.emergency')}</option>\n                    <option value=\"maintenance\">{t('processTemplates.maintenance')}</option>\n                    <option value=\"communication\">{t('processTemplates.communication')}</option>\n                    <option value=\"monitoring\">{t('processTemplates.monitoring')}</option>\n                  </select>\n                </div>\n              </div>\n\n              <div className=\"flex space-x-3 mt-6\">\n                <GlassButton type=\"submit\" variant=\"primary\">\n                  {t('processTemplates.create_template_btn')}\n                </GlassButton>\n                <GlassButton\n                  type=\"button\"\n                  variant=\"secondary\"\n                  onClick={() => setShowCreateModal(false)}\n                >\n                  {t('processTemplates.cancel')}\n                </GlassButton>\n              </div>\n            </form>\n          </GlassCard>\n        </div>\n      )}\n\n      {/* Template Details Modal */}\n      {showDetailsModal && selectedTemplate && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n          <GlassCard className=\"w-full max-w-4xl mx-4 max-h-[90vh] overflow-y-auto\">\n            <div className=\"flex justify-between items-start mb-4\">\n              <h2 className=\"text-xl font-bold text-white\">{selectedTemplate.name}</h2>\n              <button\n                onClick={() => setShowDetailsModal(false)}\n                className=\"text-gray-400 hover:text-white\"\n              >\n                <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                </svg>\n              </button>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-1\">{t('processTemplates.category_label')}</label>\n                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${getCategoryColor(selectedTemplate.category)} bg-current/20`}>\n                    {selectedTemplate.category.toUpperCase()}\n                  </span>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-1\">{t('processTemplates.usage_count')}</label>\n                  <p className=\"text-white\">{selectedTemplate.usage_count}</p>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-1\">{t('processTemplates.created_by')}</label>\n                  <p className=\"text-white\">{selectedTemplate.created_by_username}</p>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-300 mb-1\">{t('processTemplates.created_label')}</label>\n                  <p className=\"text-white\">{formatTimestamp(selectedTemplate.created_at)}</p>\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-300 mb-1\">{t('processTemplates.description_label')}</label>\n                <p className=\"text-white bg-dark-800/50 p-3 rounded\">{selectedTemplate.description}</p>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-300 mb-2\">{t('processTemplates.template_structure')}</label>\n                <pre className=\"text-white bg-dark-800/50 p-3 rounded text-xs overflow-x-auto max-h-96\">\n                  {JSON.stringify(JSON.parse(selectedTemplate.template_data), null, 2)}\n                </pre>\n              </div>\n\n              <div className=\"flex space-x-3 pt-4\">\n                <GlassButton\n                  onClick={() => {\n                    const customName = prompt(t('processTemplates.enter_process_name'), `Process from ${selectedTemplate.name}`);\n                    if (customName) {\n                      handleInstantiateTemplate(selectedTemplate.id, customName);\n                      setShowDetailsModal(false);\n                    }\n                  }}\n                  variant=\"primary\"\n                >\n                  {t('processTemplates.create_process_from')}\n                </GlassButton>\n              </div>\n            </div>\n          </GlassCard>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ProcessTemplates;","import React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport GlassCard from './ui/GlassCard';\nimport ProcessList from './processes/ProcessList';\nimport ProcessBuilder from './processes/ProcessBuilder';\nimport ProcessMonitor from './processes/ProcessMonitor';\nimport ProcessTemplates from './processes/ProcessTemplates';\n\nconst Processes = () => {\n  const { t } = useTranslation();\n  const [activeTab, setActiveTab] = useState('list');\n  const [stats, setStats] = useState({});\n\n  useEffect(() => {\n    fetchStats();\n  }, []);\n\n  const fetchStats = async () => {\n    try {\n      const response = await fetch('/api/processes/analytics/overview');\n      const data = await response.json();\n      setStats(data);\n    } catch (error) {\n      console.error('Error fetching process stats:', error);\n    }\n  };\n\n  const tabs = [\n    { id: 'list', label: t('processes.list'), component: ProcessList },\n    { id: 'builder', label: t('processes.builder'), component: ProcessBuilder },\n    { id: 'monitor', label: t('processes.monitor'), component: ProcessMonitor },\n    { id: 'templates', label: t('processes.templates'), component: ProcessTemplates }\n  ];\n\n  const ActiveComponent = tabs.find(tab => tab.id === activeTab)?.component || ProcessList;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-3xl font-bold text-white\">{t('processes.management')}</h1>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <GlassCard className=\"text-center\">\n          <div className=\"text-2xl font-bold text-white\">{stats.total_processes || 0}</div>\n          <div className=\"text-sm text-gray-400\">{t('processes.total_processes')}</div>\n        </GlassCard>\n        <GlassCard className=\"text-center\">\n          <div className=\"text-2xl font-bold text-blue-400\">{stats.total_executions || 0}</div>\n          <div className=\"text-sm text-gray-400\">{t('processes.total_executions')}</div>\n        </GlassCard>\n        <GlassCard className=\"text-center\">\n          <div className=\"text-2xl font-bold text-green-400\">{stats.success_rate?.toFixed(1) || 0}%</div>\n          <div className=\"text-sm text-gray-400\">{t('processes.success_rate')}</div>\n        </GlassCard>\n        <GlassCard className=\"text-center\">\n          <div className=\"text-2xl font-bold text-yellow-400\">{stats.recent_executions || 0}</div>\n          <div className=\"text-sm text-gray-400\">{t('processes.recent_30d')}</div>\n        </GlassCard>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"flex space-x-1 bg-dark-800/50 p-1 rounded-lg\">\n        {tabs.map((tab) => (\n          <button\n            key={tab.id}\n            onClick={() => setActiveTab(tab.id)}\n            className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${\n              activeTab === tab.id\n                ? 'bg-accent-cyan text-dark-900'\n                : 'text-gray-300 hover:text-white'\n            }`}\n          >\n            {tab.label}\n          </button>\n        ))}\n      </div>\n\n      {/* Active Component */}\n      <div className=\"mt-6\">\n        <ActiveComponent onStatsUpdate={fetchStats} />\n      </div>\n    </div>\n  );\n};\n\nexport default Processes;"],"names":["_ref","onStatsUpdate","t","useTranslation","processes","setProcesses","useState","loading","setLoading","filters","setFilters","active_only","template_id","created_by","useEffect","fetchProcesses","async","params","URLSearchParams","append","response","fetch","concat","data","json","error","console","formatTimestamp","timestamp","Date","toLocaleString","_jsx","className","children","_jsxs","GlassCard","value","onChange","e","_objectSpread","target","type","placeholder","map","process","_process$success_rate","name","is_active","description","execution_count","success_rate","toFixed","created_at","last_executed","created_by_username","template_name","onClick","processId","method","headers","body","JSON","stringify","trigger_data","manual","ok","alert","handleExecuteProcess","id","handleDeactivateProcess","length","setProcess","triggers","actions","templates","setTemplates","showTemplateModal","setShowTemplateModal","fetchTemplates","updateTrigger","index","field","newTriggers","updateAction","newActions","GlassButton","variant","onSubmit","preventDefault","required","addTrigger","trigger_type","trigger_config","conditions","priority","trigger","parseInt","filter","_","i","removeTrigger","addAction","action_type","action_config","action_order","timeout_seconds","retry_count","action","removeAction","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","template","category","usage_count","_templates$find","templateId","find","handleLoadTemplate","executions","setExecutions","selectedExecution","setSelectedExecution","showDetailsModal","setShowDetailsModal","process_id","status","fetchExecutions","getStatusBadgeColor","running","completed","failed","timeout","formatDuration","startTime","endTime","duration","execution","executionId","fetchExecutionDetails","process_name","toUpperCase","triggered_by_username","triggered_by","started_at","completed_at","steps_completed","total_steps","execution_time_ms","error_message","trigger_event","parse","steps","step","result","showCreateModal","setShowCreateModal","selectedTemplate","setSelectedTemplate","createForm","setCreateForm","handleInstantiateTemplate","customName","arguments","undefined","getCategoryColor","emergency","maintenance","communication","monitoring","showTemplateDetails","stopPropagation","prompt","rows","template_data","Processes","_tabs$find","_stats$success_rate","activeTab","setActiveTab","stats","setStats","fetchStats","tabs","label","component","ProcessList","ProcessBuilder","ProcessMonitor","ProcessTemplates","ActiveComponent","tab","total_processes","total_executions","recent_executions"],"sourceRoot":""}